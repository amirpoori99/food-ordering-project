# Nginx Production Configuration for Food Ordering System
# High-Performance Load Balancing Setup
# Supports 1M+ concurrent users with multiple app instances

# ================================================================
# GLOBAL CONFIGURATION
# ================================================================
user nginx;
worker_processes auto;  # استفاده از تمام CPU cores
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Performance optimization
worker_rlimit_nofile 65535;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
    accept_mutex on;
}

# ================================================================
# HTTP CONFIGURATION
# ================================================================
http {
    # Basic Settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging Configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance Settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Buffer Settings
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Timeout Settings
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security Headers (Global)
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=200r/s;
    
    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # ================================================================
    # UPSTREAM CONFIGURATION - Food Ordering App Instances
    # ================================================================
    upstream food_ordering_backend {
        # Load balancing method
        least_conn;  # یا ip_hash برای session affinity
        
        # Application instances
        server 127.0.0.1:8081 max_fails=3 fail_timeout=30s weight=3;
        server 127.0.0.1:8082 max_fails=3 fail_timeout=30s weight=3;
        server 127.0.0.1:8083 max_fails=3 fail_timeout=30s weight=3;
        
        # Backup instance
        server 127.0.0.1:8084 backup;
        
        # Health check
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Redis upstream for direct cache access (if needed)
    upstream redis_backend {
        server 127.0.0.1:6379 max_fails=3 fail_timeout=30s;
        keepalive 8;
    }
    
    # ================================================================
    # SSL CONFIGURATION
    # ================================================================
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # DH Parameters
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # ================================================================
    # CACHING CONFIGURATION
    # ================================================================
    # Static file cache
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:10m 
                     max_size=1g inactive=60m use_temp_path=off;
    
    # API response cache
    proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m 
                     max_size=500m inactive=30m use_temp_path=off;
    
    # ================================================================
    # REDIRECT HTTP TO HTTPS
    # ================================================================
    server {
        listen 80;
        server_name food-ordering.com www.food-ordering.com;
        return 301 https://$server_name$request_uri;
    }
    
    # ================================================================
    # MAIN HTTPS SERVER
    # ================================================================
    server {
        listen 443 ssl http2;
        server_name food-ordering.com www.food-ordering.com;
        
        # SSL Certificate
        ssl_certificate /etc/nginx/ssl/food-ordering.crt;
        ssl_certificate_key /etc/nginx/ssl/food-ordering.key;
        
        # Security Headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self'; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'none'; worker-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self';" always;
        
        # Connection limits
        limit_conn conn_limit_per_ip 20;
        
        # Root directory
        root /var/www/food-ordering/public;
        index index.html index.htm;
        
        # ================================================================
        # API ROUTES - Load Balanced Backend
        # ================================================================
        location /api/ {
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # Proxy settings
            proxy_pass http://food_ordering_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Timeout settings
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 128k;
            proxy_buffers 4 256k;
            proxy_busy_buffers_size 256k;
            
            # Cache for read-only API calls
            location ~* ^/api/(restaurants|menu|items)/.*$ {
                proxy_pass http://food_ordering_backend;
                proxy_cache api_cache;
                proxy_cache_valid 200 5m;
                proxy_cache_valid 404 1m;
                proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
                proxy_cache_background_update on;
                proxy_cache_lock on;
                add_header X-Cache-Status $upstream_cache_status;
            }
        }
        
        # ================================================================
        # AUTHENTICATION ROUTES - Special Rate Limiting
        # ================================================================
        location /api/auth/ {
            # Stricter rate limiting for auth
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://food_ordering_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # No caching for auth endpoints
            proxy_no_cache 1;
            proxy_cache_bypass 1;
        }
        
        # ================================================================
        # WEBSOCKET ROUTES (if implemented)
        # ================================================================
        location /ws/ {
            proxy_pass http://food_ordering_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket specific timeouts
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;
        }
        
        # ================================================================
        # STATIC FILES - High-Performance Serving
        # ================================================================
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            # Rate limiting for static files
            limit_req zone=static burst=50 nodelay;
            
            # Cache settings
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Content-Type-Options nosniff;
            
            # Enable static file caching
            proxy_cache static_cache;
            proxy_cache_valid 200 1y;
            
            # Fallback to backend if file not found
            try_files $uri $uri/ @backend;
        }
        
        # ================================================================
        # FRONTEND ROUTES - SPA Support
        # ================================================================
        location / {
            try_files $uri $uri/ /index.html;
            
            # HTML files should not be cached
            location ~* \.html$ {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
        }
        
        # ================================================================
        # HEALTH CHECK ENDPOINT
        # ================================================================
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # ================================================================
        # BACKEND FALLBACK
        # ================================================================
        location @backend {
            proxy_pass http://food_ordering_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # ================================================================
        # DENY ACCESS TO SENSITIVE FILES
        # ================================================================
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~* \.(env|config|conf|sql|log)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # ================================================================
        # ERROR PAGES
        # ================================================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /var/www/error-pages;
        }
        
        location = /404.html {
            root /var/www/error-pages;
        }
    }
    
    # ================================================================
    # ADMIN/MONITORING SERVER (Internal)
    # ================================================================
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        
        # Nginx status
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
        
        # PHP-FPM status (if using PHP)
        location ~ ^/(status|ping)$ {
            include fastcgi_params;
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            allow 127.0.0.1;
            deny all;
        }
    }
}

# ================================================================
# STREAM CONFIGURATION (TCP/UDP Load Balancing)
# ================================================================
stream {
    # Log format for stream
    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time';
    
    # Redis load balancing (if needed)
    upstream redis_cluster {
        server 127.0.0.1:6379 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:6380 max_fails=3 fail_timeout=30s backup;
    }
    
    # PostgreSQL load balancing (for read replicas)
    upstream postgres_read {
        server 127.0.0.1:5432 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:5433 max_fails=3 fail_timeout=30s;
    }
} 