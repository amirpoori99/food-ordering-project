# Redis Connection Pool Configuration
# Phase 46 Enhancement - Enterprise Redis Connection Pooling

################################## BASIC SETTINGS ###############################

# Redis server connection details
redis.host=localhost
redis.port=6379
redis.password=foodordering_redis_password_2025
redis.database=0

# Connection timeout (milliseconds)
redis.connection.timeout=5000

# Socket timeout (milliseconds)
redis.socket.timeout=2000

################################### POOL SETTINGS #############################

# Pool configuration using Apache Commons Pool2
# Maximum number of connections in the pool
redis.pool.max.total=100

# Maximum number of idle connections in the pool
redis.pool.max.idle=50

# Minimum number of idle connections in the pool
redis.pool.min.idle=10

# Maximum number of connections that can be allocated at one time
redis.pool.max.active=100

# Maximum time to wait for a connection (milliseconds)
redis.pool.max.wait=5000

# Test connection on borrow
redis.pool.test.on.borrow=true

# Test connection on return
redis.pool.test.on.return=true

# Test idle connections
redis.pool.test.while.idle=true

# Number of connections to test during idle check
redis.pool.num.tests.per.eviction.run=3

# Time between eviction runs (milliseconds)
redis.pool.time.between.eviction.runs=30000

# Minimum idle time for eviction (milliseconds)
redis.pool.min.evictable.idle.time=60000

# Block when pool is exhausted
redis.pool.block.when.exhausted=true

# LIFO behavior (Last In, First Out)
redis.pool.lifo=true

# Fair queueing when blocked
redis.pool.fairness=false

################################# JEDIS SPECIFIC ##############################

# Jedis connection pool settings
jedis.pool.max.total=200
jedis.pool.max.idle=100
jedis.pool.min.idle=20
jedis.pool.max.wait.millis=5000
jedis.pool.test.on.borrow=true
jedis.pool.test.on.return=false
jedis.pool.test.while.idle=true
jedis.pool.min.evictable.idle.time.millis=60000
jedis.pool.time.between.eviction.runs.millis=30000
jedis.pool.num.tests.per.eviction.run=3
jedis.pool.block.when.exhausted=true

################################# LETTUCE SPECIFIC ############################

# Lettuce connection pool settings (alternative to Jedis)
lettuce.pool.max.total=150
lettuce.pool.max.idle=75
lettuce.pool.min.idle=15
lettuce.pool.max.wait.millis=5000
lettuce.pool.test.on.borrow=true
lettuce.pool.test.on.return=false
lettuce.pool.test.while.idle=true
lettuce.pool.min.evictable.idle.time.millis=60000
lettuce.pool.time.between.eviction.runs.millis=30000
lettuce.pool.num.tests.per.eviction.run=3
lettuce.pool.block.when.exhausted=true

################################# CLUSTER SETTINGS ############################

# Redis Cluster configuration
redis.cluster.enabled=false
redis.cluster.nodes=localhost:6379,localhost:6380,localhost:6381
redis.cluster.max.redirects=3
redis.cluster.connection.timeout=5000
redis.cluster.socket.timeout=2000

# Cluster pool settings
redis.cluster.pool.max.total=300
redis.cluster.pool.max.idle=150
redis.cluster.pool.min.idle=30

################################# SENTINEL SETTINGS ###########################

# Redis Sentinel configuration for high availability
redis.sentinel.enabled=false
redis.sentinel.master.name=mymaster
redis.sentinel.nodes=localhost:26379,localhost:26380,localhost:26381
redis.sentinel.connection.timeout=5000
redis.sentinel.socket.timeout=2000

# Sentinel pool settings
redis.sentinel.pool.max.total=150
redis.sentinel.pool.max.idle=75
redis.sentinel.pool.min.idle=15

################################## PERFORMANCE TUNING #####################

# Connection retry settings
redis.retry.attempts=3
redis.retry.delay=1000

# Pipeline settings
redis.pipeline.enabled=true
redis.pipeline.batch.size=100

# Compression settings
redis.compression.enabled=true
redis.compression.type=gzip

# Serialization settings
redis.serialization.type=json

# Cache settings specific to Food Ordering System
redis.cache.default.ttl=3600
redis.cache.session.ttl=7200
redis.cache.menu.ttl=1800
redis.cache.restaurant.ttl=3600
redis.cache.order.ttl=1800
redis.cache.analytics.ttl=86400

################################### MONITORING #########################

# Health check settings
redis.health.check.enabled=true
redis.health.check.interval=30000
redis.health.check.timeout=5000

# Metrics collection
redis.metrics.enabled=true
redis.metrics.interval=60000

# Slow query monitoring
redis.slow.query.enabled=true
redis.slow.query.threshold=100

################################### SECURITY ###########################

# SSL/TLS settings
redis.ssl.enabled=false
redis.ssl.keystore.path=/path/to/keystore.jks
redis.ssl.keystore.password=keystorepassword
redis.ssl.truststore.path=/path/to/truststore.jks
redis.ssl.truststore.password=truststorepassword

# Authentication
redis.auth.enabled=true
redis.auth.password=foodordering_redis_password_2025

################################### ENVIRONMENT SPECIFIC ##################

# Development environment
redis.dev.host=localhost
redis.dev.port=6379
redis.dev.pool.max.total=20
redis.dev.pool.max.idle=10
redis.dev.pool.min.idle=2

# Staging environment
redis.staging.host=localhost
redis.staging.port=6380
redis.staging.pool.max.total=50
redis.staging.pool.max.idle=25
redis.staging.pool.min.idle=5

# Production environment
redis.prod.host=production-redis.example.com
redis.prod.port=6379
redis.prod.pool.max.total=200
redis.prod.pool.max.idle=100
redis.prod.pool.min.idle=20

################################### FOOD ORDERING SPECIFIC #############

# Application-specific cache configurations
food.ordering.cache.users.ttl=7200
food.ordering.cache.restaurants.ttl=3600
food.ordering.cache.menu.ttl=1800
food.ordering.cache.orders.ttl=3600
food.ordering.cache.payments.ttl=300
food.ordering.cache.sessions.ttl=7200
food.ordering.cache.analytics.ttl=86400

# Feature flags for caching
food.ordering.cache.user.sessions.enabled=true
food.ordering.cache.restaurant.data.enabled=true
food.ordering.cache.menu.items.enabled=true
food.ordering.cache.order.history.enabled=true
food.ordering.cache.payment.tokens.enabled=true
food.ordering.cache.analytics.enabled=true

# Performance thresholds
food.ordering.performance.connection.max.wait=3000
food.ordering.performance.operation.timeout=2000
food.ordering.performance.pool.validation.timeout=1000

################################### BACKUP AND RECOVERY #################

# Backup configuration
redis.backup.enabled=true
redis.backup.interval=3600000
redis.backup.retention.days=7
redis.backup.path=/var/backups/redis

# Recovery settings
redis.recovery.enabled=true
redis.recovery.checkpoint.interval=300000

################################### LOGGING ##############################

# Logging configuration
redis.logging.enabled=true
redis.logging.level=INFO
redis.logging.file=/var/log/redis/redis-pool.log
redis.logging.max.size=100MB
redis.logging.max.files=10

# Performance logging
redis.performance.logging.enabled=true
redis.performance.logging.slow.threshold=1000
redis.performance.logging.file=/var/log/redis/redis-performance.log

################################### NOTES ################################

# Configuration Notes:
# 1. Adjust pool sizes based on your application's load
# 2. Monitor connection usage and adjust accordingly
# 3. Test configurations in staging before production
# 4. Regular monitoring of Redis metrics is essential
# 5. Consider using Redis Cluster for high availability
# 6. Implement proper error handling and retry logic
# 7. Regular backup and recovery testing
# 8. Monitor memory usage and optimize accordingly 