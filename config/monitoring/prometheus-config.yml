# Prometheus Configuration for Food Ordering System
# Enterprise-Grade Performance Monitoring

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'food-ordering-monitor'
    environment: '{{ .Environment }}'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'
rule_files:
  - "alert_rules.yml"
  - "recording_rules.yml"

# Scrape configurations
scrape_configs:
  # Prometheus itself
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 5s
    metrics_path: /metrics

  # Food Ordering Application
  - job_name: 'food-ordering-app'
    static_configs:
      - targets: ['localhost:8080']
    scrape_interval: 10s
    metrics_path: /actuator/prometheus
    scrape_timeout: 5s

  # Database Monitoring
  - job_name: 'database-exporter'
    static_configs:
      - targets: ['localhost:9187']
    scrape_interval: 30s
    metrics_path: /metrics

  # Redis Cache Monitoring
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['localhost:9121']
    scrape_interval: 15s
    metrics_path: /metrics

  # System Metrics (Node Exporter)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['localhost:9100']
    scrape_interval: 15s
    metrics_path: /metrics

  # JVM Metrics
  - job_name: 'jvm-metrics'
    static_configs:
      - targets: ['localhost:8080']
    scrape_interval: 10s
    metrics_path: /actuator/prometheus
    params:
      format: ['prometheus']

  # Load Balancer Metrics (if using NGINX)
  - job_name: 'nginx-exporter'
    static_configs:
      - targets: ['localhost:9113']
    scrape_interval: 15s
    metrics_path: /metrics

  # Custom Application Metrics
  - job_name: 'custom-food-ordering-metrics'
    static_configs:
      - targets: ['localhost:8081']
    scrape_interval: 10s
    metrics_path: /metrics
    honor_labels: true

# Remote write configuration (for long-term storage)
remote_write:
  - url: "http://localhost:8086/api/v1/prom/write?db=prometheus"
    queue_config:
      max_samples_per_send: 1000
      max_shards: 200
      capacity: 2500

# Storage configuration
storage:
  tsdb:
    retention.time: 30d
    retention.size: 10GB
    path: /prometheus/data

# Performance optimizations
query:
  max_concurrency: 20
  timeout: 2m
  max_samples: 50000000 