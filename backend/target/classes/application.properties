# سیستم سفارش غذا - پیکربندی محیط تولید
# فایل پیکربندی اصلی برای تنظیمات سرور، دیتابیس و امنیت
# این فایل برای محیط توسعه و تست طراحی شده است
# برای محیط تولید، از فایل application-production.properties استفاده کنید

# ==================== تنظیمات سرور ====================
# پیکربندی اصلی سرور HTTP برای محیط توسعه
# پورت سرور - پورت پیش‌فرض 8081
server.port=${SERVER_PORT:8081}
# این پورت برای محیط توسعه و تست استفاده می‌شود
# در محیط تولید، معمولاً از پورت 80 یا 443 استفاده می‌شود

# آدرس میزبان سرور - localhost برای محیط محلی
server.host=${SERVER_HOST:localhost}
# در محیط توسعه، فقط از localhost پذیرش اتصال می‌کند
# این تنظیم برای امنیت بیشتر در محیط توسعه است

# حداکثر تعداد thread های پردازش همزمان درخواست‌ها
server.max-threads=${SERVER_MAX_THREADS:50}
# برای محیط توسعه، تعداد کمتری thread استفاده می‌شود
# در محیط تولید، این مقدار افزایش می‌یابد

# ==================== تنظیمات پایگاه داده ====================
# پیکربندی اتصال به پایگاه داده برای محیط توسعه
# URL اتصال به پایگاه داده SQLite - برای محیط توسعه و تست
database.url=${DATABASE_URL:jdbc:sqlite:food_ordering.db}
# SQLite برای محیط توسعه انتخاب شده است زیرا:
# - نیاز به نصب سرور جداگانه ندارد
# - فایل‌محور است و مدیریت آسان دارد
# - برای تست و توسعه مناسب است

# درایور پایگاه داده SQLite
database.driver=${DATABASE_DRIVER:org.sqlite.JDBC}
# درایور JDBC برای SQLite

# نام کاربری پایگاه داده (برای SQLite خالی است)
database.username=${DATABASE_USERNAME:}
# SQLite از احراز هویت کاربری استفاده نمی‌کند

# رمز عبور پایگاه داده (برای SQLite خالی است)
database.password=${DATABASE_PASSWORD:}
# SQLite از رمز عبور استفاده نمی‌کند

# تنظیمات PostgreSQL برای محیط تولید (کامنت را برای استفاده برداری)
# database.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/food_ordering}
# database.driver=${DATABASE_DRIVER:org.postgresql.Driver}
# database.username=${DATABASE_USERNAME:food_ordering_user}
# database.password=${DATABASE_PASSWORD:your_secure_password}
# برای استفاده در محیط تولید، این خطوط را از کامنت خارج کنید
# و تنظیمات SQLite را کامنت کنید

# ==================== تنظیمات امنیتی ====================
# پیکربندی‌های امنیتی برای محیط توسعه
# کلید مخفی JWT - باید در محیط تولید از متغیر محیطی استفاده شود
jwt.secret=${JWT_SECRET:FoodOrderingSecretKey2024VerySecureAndComplexJWTTokenSecret256Bits}
# این کلید برای محیط توسعه استفاده می‌شود
# در محیط تولید، حتماً از متغیر محیطی استفاده کنید
# طول کلید باید حداقل 256 بیت باشد

# مدت اعتبار Access Token به میلی‌ثانیه (15 دقیقه)
jwt.access-token.expiration=${JWT_ACCESS_EXPIRATION:900000}
# برای محیط توسعه، مدت کوتاه‌تری تنظیم شده است
# در محیط تولید، معمولاً 24 ساعت تنظیم می‌شود

# مدت اعتبار Refresh Token به میلی‌ثانیه (24 ساعت)
jwt.refresh-token.expiration=${JWT_REFRESH_EXPIRATION:86400000}
# Refresh Token برای تمدید Access Token استفاده می‌شود
# مدت طولانی‌تری دارد تا کاربر مجبور به ورود مجدد نباشد

# ==================== تنظیمات SSL ====================
# پیکربندی SSL/TLS برای محیط توسعه
# فعال‌سازی SSL/TLS - false برای محیط توسعه، true برای محیط تولید
ssl.enabled=${SSL_ENABLED:false}
# در محیط توسعه، معمولاً SSL غیرفعال است
# در محیط تولید، حتماً باید فعال باشد

# مسیر فایل keystore برای گواهی SSL
ssl.keystore.path=${SSL_KEYSTORE_PATH:}
# در محیط توسعه، معمولاً خالی است
# در محیط تولید، مسیر فایل keystore تنظیم می‌شود

# رمز عبور keystore
ssl.keystore.password=${SSL_KEYSTORE_PASSWORD:}
# در محیط توسعه، معمولاً خالی است
# در محیط تولید، رمز عبور keystore تنظیم می‌شود

# ==================== تنظیمات لاگ ====================
# پیکربندی سیستم لاگ برای محیط توسعه
# سطح لاگ کلی سیستم (ERROR, WARN, INFO, DEBUG, TRACE)
logging.level.root=${LOG_LEVEL_ROOT:INFO}
# در محیط توسعه، معمولاً INFO یا DEBUG تنظیم می‌شود
# در محیط تولید، معمولاً WARN یا ERROR تنظیم می‌شود

# سطح لاگ اختصاصی برای پکیج برنامه
logging.level.com.myapp=${LOG_LEVEL_APP:DEBUG}
# برای محیط توسعه، DEBUG برای مشاهده جزئیات بیشتر
# در محیط تولید، INFO یا WARN تنظیم می‌شود

# مسیر ذخیره فایل‌های لاگ
logging.file.path=${LOG_FILE_PATH:./logs}
# در محیط توسعه، لاگ‌ها در پوشه logs ذخیره می‌شوند
# در محیط تولید، معمولاً در /var/log ذخیره می‌شوند

# ==================== تنظیمات CORS ====================
# پیکربندی Cross-Origin Resource Sharing برای محیط توسعه
# آدرس‌های مجاز برای دسترسی cross-origin
cors.allowed.origins=${CORS_ORIGINS:http://localhost:3000,http://localhost:8080}
# در محیط توسعه، معمولاً localhost مجاز است
# در محیط تولید، فقط دامنه‌های معتبر مجاز هستند

# HTTP method های مجاز
cors.allowed.methods=${CORS_METHODS:GET,POST,PUT,DELETE,OPTIONS}
# تمام method های اصلی مجاز هستند
# OPTIONS برای preflight requests ضروری است

# ==================== تنظیمات عملکرد ====================
# پیکربندی‌های مربوط به بهینه‌سازی عملکرد
# فعال‌سازی cache برای بهبود عملکرد
cache.enabled=${CACHE_ENABLED:true}
# کش برای بهبود عملکرد و کاهش بار سرور استفاده می‌شود
# در محیط توسعه، معمولاً فعال است

# فعال‌سازی محدودیت نرخ درخواست (Rate Limiting)
rate.limit.enabled=${RATE_LIMIT_ENABLED:true}
# Rate Limiting برای جلوگیری از حملات و سوء استفاده استفاده می‌شود
# در محیط توسعه، معمولاً فعال است اما محدودیت‌های کمتری دارد

# حداکثر تعداد درخواست در دقیقه برای هر IP
rate.limit.requests-per-minute=${RATE_LIMIT_RPM:100}
# برای محیط توسعه، محدودیت بیشتری وجود دارد
# در محیط تولید، این مقدار بر اساس نیاز تنظیم می‌شود

# ==================== تنظیمات SQLite برای تست ====================
# پیکربندی‌های خاص SQLite برای کاهش مشکلات قفل در تست‌ها
# تنظیم اندازه batch برای SQLite
spring.jpa.properties.hibernate.jdbc.batch_size=1
# SQLite با batch size بزرگ مشکل دارد، بنابراین 1 تنظیم می‌شود

# غیرفعال‌سازی ترتیب‌دهی عملیات برای SQLite
spring.jpa.properties.hibernate.order_inserts=false
spring.jpa.properties.hibernate.order_updates=false
spring.jpa.properties.hibernate.batch_versioned_data=false

# تنظیم timeout برای اتصالات SQLite
spring.jpa.properties.hibernate.jdbc.timeout=60
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true

# غیرفعال‌سازی cache سطح دوم برای SQLite
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# تنظیمات اضافی برای کاهش قفل‌های SQLite
spring.jpa.properties.hibernate.connection.isolation=1
spring.jpa.properties.hibernate.connection.autocommit=false

# تنظیمات SQLite برای جلوگیری از قفل
spring.jpa.properties.hibernate.connection.url=jdbc:sqlite:food_ordering.db?busy_timeout=30000&journal_mode=WAL&synchronous=NORMAL&cache=shared&temp_store=memory
spring.jpa.properties.hibernate.connection.driver_class=org.sqlite.JDBC

# تنظیمات connection pool برای SQLite
spring.jpa.properties.hibernate.connection.pool_size=1
spring.jpa.properties.hibernate.connection.max_pool_size=1
spring.jpa.properties.hibernate.connection.min_pool_size=1

# تنظیمات transaction برای SQLite
spring.jpa.properties.hibernate.transaction.jta.platform=org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform
spring.jpa.properties.hibernate.current_session_context_class=thread