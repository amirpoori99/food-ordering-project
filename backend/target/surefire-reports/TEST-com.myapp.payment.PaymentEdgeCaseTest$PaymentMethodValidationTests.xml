<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="1.272" tests="17" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/workspace/backend/target/test-classes:/workspace/backend/target/classes:/home/ubuntu/.m2/repository/org/hibernate/orm/hibernate-core/6.4.0.Final/hibernate-core-6.4.0.Final.jar:/home/ubuntu/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/ubuntu/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/ubuntu/.m2/repository/org/jboss/logging/jboss-logging/3.5.0.Final/jboss-logging-3.5.0.Final.jar:/home/ubuntu/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/home/ubuntu/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/home/ubuntu/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/home/ubuntu/.m2/repository/net/bytebuddy/byte-buddy/1.14.7/byte-buddy-1.14.7.jar:/home/ubuntu/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.0/jakarta.xml.bind-api-4.0.0.jar:/home/ubuntu/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.0/jakarta.activation-api-2.1.0.jar:/home/ubuntu/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.2/jaxb-runtime-4.0.2.jar:/home/ubuntu/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.2/jaxb-core-4.0.2.jar:/home/ubuntu/.m2/repository/org/eclipse/angus/angus-activation/2.0.0/angus-activation-2.0.0.jar:/home/ubuntu/.m2/repository/org/glassfish/jaxb/txw2/4.0.2/txw2-4.0.2.jar:/home/ubuntu/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.1/istack-commons-runtime-4.1.1.jar:/home/ubuntu/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/ubuntu/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/ubuntu/.m2/repository/org/hibernate/orm/hibernate-community-dialects/6.2.13.Final/hibernate-community-dialects-6.2.13.Final.jar:/home/ubuntu/.m2/repository/org/xerial/sqlite-jdbc/3.44.0.0/sqlite-jdbc-3.44.0.0.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.2/jackson-core-2.15.2.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.2/jackson-databind-2.15.2.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.2/jackson-annotations-2.15.2.jar:/home/ubuntu/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/home/ubuntu/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/home/ubuntu/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/home/ubuntu/.m2/repository/org/mindrot/jbcrypt/0.4/jbcrypt-0.4.jar:/home/ubuntu/.m2/repository/io/jsonwebtoken/jjwt-api/0.12.3/jjwt-api-0.12.3.jar:/home/ubuntu/.m2/repository/io/jsonwebtoken/jjwt-impl/0.12.3/jjwt-impl-0.12.3.jar:/home/ubuntu/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.12.3/jjwt-jackson-0.12.3.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.0/junit-jupiter-5.10.0.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.0/junit-jupiter-api-5.10.0.jar:/home/ubuntu/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/ubuntu/.m2/repository/org/junit/platform/junit-platform-commons/1.10.0/junit-platform-commons-1.10.0.jar:/home/ubuntu/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.0/junit-jupiter-params-5.10.0.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.0/junit-jupiter-engine-5.10.0.jar:/home/ubuntu/.m2/repository/org/junit/platform/junit-platform-engine/1.10.0/junit-platform-engine-1.10.0.jar:/home/ubuntu/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/home/ubuntu/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.9/byte-buddy-agent-1.14.9.jar:/home/ubuntu/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/ubuntu/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/home/ubuntu/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/home/ubuntu/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/home/ubuntu/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/home/ubuntu/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/ubuntu/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/ubuntu/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/home/ubuntu/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/home/ubuntu/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/home/ubuntu/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/home/ubuntu/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/home/ubuntu/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/home/ubuntu/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/home/ubuntu/.m2/repository/com/squareup/okhttp3/mockwebserver/4.11.0/mockwebserver-4.11.0.jar:/home/ubuntu/.m2/repository/com/squareup/okhttp3/okhttp/4.11.0/okhttp-4.11.0.jar:/home/ubuntu/.m2/repository/com/squareup/okio/okio/3.2.0/okio-3.2.0.jar:/home/ubuntu/.m2/repository/com/squareup/okio/okio-jvm/3.2.0/okio-jvm-3.2.0.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.6.20/kotlin-stdlib-1.6.20.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-common/1.6.20/kotlin-stdlib-common-1.6.20.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.6.10/kotlin-stdlib-jdk8-1.6.10.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.6.10/kotlin-stdlib-jdk7-1.6.10.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.2/jackson-datatype-jsr310-2.15.2.jar:"/>
    <property name="java.vm.vendor" value="Ubuntu"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://ubuntu.com/"/>
    <property name="user.timezone" value="UTC"/>
    <property name="os.name" value="Linux"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-21-openjdk-amd64/lib"/>
    <property name="sun.java.command" value="/workspace/backend/target/surefire/surefirebooter-20250703234215266_3.jar /workspace/backend/target/surefire 2025-07-03T23-42-09_523-jvmRun1 surefire-20250703234215266_1tmp surefire_0-20250703234215266_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/workspace/backend/target/test-classes:/workspace/backend/target/classes:/home/ubuntu/.m2/repository/org/hibernate/orm/hibernate-core/6.4.0.Final/hibernate-core-6.4.0.Final.jar:/home/ubuntu/.m2/repository/jakarta/persistence/jakarta.persistence-api/3.1.0/jakarta.persistence-api-3.1.0.jar:/home/ubuntu/.m2/repository/jakarta/transaction/jakarta.transaction-api/2.0.1/jakarta.transaction-api-2.0.1.jar:/home/ubuntu/.m2/repository/org/jboss/logging/jboss-logging/3.5.0.Final/jboss-logging-3.5.0.Final.jar:/home/ubuntu/.m2/repository/org/hibernate/common/hibernate-commons-annotations/6.0.6.Final/hibernate-commons-annotations-6.0.6.Final.jar:/home/ubuntu/.m2/repository/io/smallrye/jandex/3.1.2/jandex-3.1.2.jar:/home/ubuntu/.m2/repository/com/fasterxml/classmate/1.5.1/classmate-1.5.1.jar:/home/ubuntu/.m2/repository/net/bytebuddy/byte-buddy/1.14.7/byte-buddy-1.14.7.jar:/home/ubuntu/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.0/jakarta.xml.bind-api-4.0.0.jar:/home/ubuntu/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.0/jakarta.activation-api-2.1.0.jar:/home/ubuntu/.m2/repository/org/glassfish/jaxb/jaxb-runtime/4.0.2/jaxb-runtime-4.0.2.jar:/home/ubuntu/.m2/repository/org/glassfish/jaxb/jaxb-core/4.0.2/jaxb-core-4.0.2.jar:/home/ubuntu/.m2/repository/org/eclipse/angus/angus-activation/2.0.0/angus-activation-2.0.0.jar:/home/ubuntu/.m2/repository/org/glassfish/jaxb/txw2/4.0.2/txw2-4.0.2.jar:/home/ubuntu/.m2/repository/com/sun/istack/istack-commons-runtime/4.1.1/istack-commons-runtime-4.1.1.jar:/home/ubuntu/.m2/repository/jakarta/inject/jakarta.inject-api/2.0.1/jakarta.inject-api-2.0.1.jar:/home/ubuntu/.m2/repository/org/antlr/antlr4-runtime/4.13.0/antlr4-runtime-4.13.0.jar:/home/ubuntu/.m2/repository/org/hibernate/orm/hibernate-community-dialects/6.2.13.Final/hibernate-community-dialects-6.2.13.Final.jar:/home/ubuntu/.m2/repository/org/xerial/sqlite-jdbc/3.44.0.0/sqlite-jdbc-3.44.0.0.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.15.2/jackson-core-2.15.2.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.15.2/jackson-databind-2.15.2.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.15.2/jackson-annotations-2.15.2.jar:/home/ubuntu/.m2/repository/org/slf4j/slf4j-api/2.0.9/slf4j-api-2.0.9.jar:/home/ubuntu/.m2/repository/ch/qos/logback/logback-classic/1.4.11/logback-classic-1.4.11.jar:/home/ubuntu/.m2/repository/ch/qos/logback/logback-core/1.4.11/logback-core-1.4.11.jar:/home/ubuntu/.m2/repository/org/mindrot/jbcrypt/0.4/jbcrypt-0.4.jar:/home/ubuntu/.m2/repository/io/jsonwebtoken/jjwt-api/0.12.3/jjwt-api-0.12.3.jar:/home/ubuntu/.m2/repository/io/jsonwebtoken/jjwt-impl/0.12.3/jjwt-impl-0.12.3.jar:/home/ubuntu/.m2/repository/io/jsonwebtoken/jjwt-jackson/0.12.3/jjwt-jackson-0.12.3.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter/5.10.0/junit-jupiter-5.10.0.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.10.0/junit-jupiter-api-5.10.0.jar:/home/ubuntu/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/home/ubuntu/.m2/repository/org/junit/platform/junit-platform-commons/1.10.0/junit-platform-commons-1.10.0.jar:/home/ubuntu/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.10.0/junit-jupiter-params-5.10.0.jar:/home/ubuntu/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.10.0/junit-jupiter-engine-5.10.0.jar:/home/ubuntu/.m2/repository/org/junit/platform/junit-platform-engine/1.10.0/junit-platform-engine-1.10.0.jar:/home/ubuntu/.m2/repository/org/mockito/mockito-core/5.7.0/mockito-core-5.7.0.jar:/home/ubuntu/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.9/byte-buddy-agent-1.14.9.jar:/home/ubuntu/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/home/ubuntu/.m2/repository/org/assertj/assertj-core/3.24.2/assertj-core-3.24.2.jar:/home/ubuntu/.m2/repository/com/h2database/h2/2.2.224/h2-2.2.224.jar:/home/ubuntu/.m2/repository/org/testcontainers/junit-jupiter/1.19.3/junit-jupiter-1.19.3.jar:/home/ubuntu/.m2/repository/org/testcontainers/testcontainers/1.19.3/testcontainers-1.19.3.jar:/home/ubuntu/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/home/ubuntu/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/ubuntu/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/home/ubuntu/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/home/ubuntu/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/home/ubuntu/.m2/repository/com/github/docker-java/docker-java-api/3.3.4/docker-java-api-3.3.4.jar:/home/ubuntu/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.3.4/docker-java-transport-zerodep-3.3.4.jar:/home/ubuntu/.m2/repository/com/github/docker-java/docker-java-transport/3.3.4/docker-java-transport-3.3.4.jar:/home/ubuntu/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/home/ubuntu/.m2/repository/com/squareup/okhttp3/mockwebserver/4.11.0/mockwebserver-4.11.0.jar:/home/ubuntu/.m2/repository/com/squareup/okhttp3/okhttp/4.11.0/okhttp-4.11.0.jar:/home/ubuntu/.m2/repository/com/squareup/okio/okio/3.2.0/okio-3.2.0.jar:/home/ubuntu/.m2/repository/com/squareup/okio/okio-jvm/3.2.0/okio-jvm-3.2.0.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.6.20/kotlin-stdlib-1.6.20.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-common/1.6.20/kotlin-stdlib-common-1.6.20.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.6.10/kotlin-stdlib-jdk8-1.6.10.jar:/home/ubuntu/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.6.10/kotlin-stdlib-jdk7-1.6.10.jar:/home/ubuntu/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.15.2/jackson-datatype-jsr310-2.15.2.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/home/ubuntu"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-04-15"/>
    <property name="java.home" value="/usr/lib/jvm/java-21-openjdk-amd64"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/workspace/backend"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="/workspace/backend/target/surefire/surefirebooter-20250703234215266_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="21.0.7+6-Ubuntu-0ubuntu125.04"/>
    <property name="user.name" value="ubuntu"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="6.8.0-1024-aws"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="localRepository" value="/home/ubuntu/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://bugs.launchpad.net/ubuntu/+source/openjdk-21"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="java.version" value="21.0.7"/>
    <property name="user.dir" value="/workspace/backend"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Ubuntu"/>
    <property name="java.vm.version" value="21.0.7+6-Ubuntu-0ubuntu125.04"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="65.0"/>
    <property name="app.profiles.active" value="test"/>
  </properties>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[1]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.073">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:44.798 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:44.798 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:44.798 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:44.798 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:44.798 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:44.798 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:44.798 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:44.801 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:44.801 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:44.852 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:44.852 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.854 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.856 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:44.856 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.859 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:44.859 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.861 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:44.861 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:44.862 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:44.863 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.865 [main] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(case 
            when t1_0.type=? 
                then t1_0.amount 
            when t1_0.type=? 
                then -t1_0.amount 
            else 0 
        end), 0.0) 
    from
        transactions t1_0 
    where
        t1_0.user_id=? 
        and t1_0.status=? 
        and t1_0.type in (?, ?)
Hibernate: 
    select
        coalesce(sum(case 
            when t1_0.type=? 
                then t1_0.amount 
            when t1_0.type=? 
                then -t1_0.amount 
            else 0 
        end), 0.0) 
    from
        transactions t1_0 
    where
        t1_0.user_id=? 
        and t1_0.status=? 
        and t1_0.type in (?, ?)
2025-07-03 23:42:44.866 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.868 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:44.868 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: WALLET
]]></system-out>
  </testcase>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[2]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.071">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:44.871 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:44.871 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:44.871 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:44.871 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:44.871 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:44.871 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:44.871 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:44.874 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:44.874 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:44.924 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:44.925 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.927 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.929 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:44.929 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.932 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:44.932 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.934 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:44.934 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:44.935 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:44.935 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.938 [main] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(case 
            when t1_0.type=? 
                then t1_0.amount 
            when t1_0.type=? 
                then -t1_0.amount 
            else 0 
        end), 0.0) 
    from
        transactions t1_0 
    where
        t1_0.user_id=? 
        and t1_0.status=? 
        and t1_0.type in (?, ?)
Hibernate: 
    select
        coalesce(sum(case 
            when t1_0.type=? 
                then t1_0.amount 
            when t1_0.type=? 
                then -t1_0.amount 
            else 0 
        end), 0.0) 
    from
        transactions t1_0 
    where
        t1_0.user_id=? 
        and t1_0.status=? 
        and t1_0.type in (?, ?)
2025-07-03 23:42:44.938 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.940 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:44.940 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: wallet
]]></system-out>
  </testcase>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[3]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.072">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:44.943 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:44.943 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:44.943 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:44.943 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:44.943 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:44.943 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:44.943 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:44.946 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:44.946 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:44.997 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:44.997 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:44.999 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.002 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.002 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.004 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.004 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.007 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.007 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.007 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.008 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.011 [main] DEBUG org.hibernate.SQL - 
    select
        coalesce(sum(case 
            when t1_0.type=? 
                then t1_0.amount 
            when t1_0.type=? 
                then -t1_0.amount 
            else 0 
        end), 0.0) 
    from
        transactions t1_0 
    where
        t1_0.user_id=? 
        and t1_0.status=? 
        and t1_0.type in (?, ?)
Hibernate: 
    select
        coalesce(sum(case 
            when t1_0.type=? 
                then t1_0.amount 
            when t1_0.type=? 
                then -t1_0.amount 
            else 0 
        end), 0.0) 
    from
        transactions t1_0 
    where
        t1_0.user_id=? 
        and t1_0.status=? 
        and t1_0.type in (?, ?)
2025-07-03 23:42:45.011 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.013 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.013 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: Wallet
]]></system-out>
  </testcase>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[4]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.069">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.016 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.016 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.016 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.016 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.016 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.016 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.016 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.019 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.019 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.069 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.070 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.072 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.072 [main] DEBUG org.hibernate.SQL - 
    select
        next_val as id_val 
    from
        restaurants_SEQ
Hibernate: 
    select
        next_val as id_val 
    from
        restaurants_SEQ
2025-07-03 23:42:45.072 [main] DEBUG org.hibernate.SQL - 
    update
        restaurants_SEQ 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    update
        restaurants_SEQ 
    set
        next_val= ? 
    where
        next_val=?
2025-07-03 23:42:45.074 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.074 [main] ERROR org.hibernate.orm.jdbc.batch - HHH100501: Exception executing batch [org.sqlite.SQLiteException: [SQLITE_BUSY_SNAPSHOT] Another database connection has already written to the database (database is locked)], SQL: insert into restaurants (address,name,owner_id,phone,status,id) values (?,?,?,?,?,?)
2025-07-03 23:42:45.075 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 5, SQLState: null
2025-07-03 23:42:45.075 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - [SQLITE_BUSY_SNAPSHOT] Another database connection has already written to the database (database is locked)
⚠️ Restaurant save attempt 1 failed: org.hibernate.exception.LockAcquisitionException: could not execute batch [[SQLITE_BUSY_SNAPSHOT] Another database connection has already written to the database (database is locked)] [insert into restaurants (address,name,owner_id,phone,status,id) values (?,?,?,?,?,?)]
2025-07-03 23:42:45.075 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.075 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.077 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.078 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.080 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.080 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.081 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.081 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.083 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.083 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: CARD
]]></system-out>
  </testcase>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[5]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.066">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.086 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.086 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.086 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.086 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.086 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.086 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.086 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.089 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.089 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.139 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.140 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.142 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.142 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.144 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.145 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.147 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.147 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.148 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.148 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.150 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.150 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: card
]]></system-out>
  </testcase>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[6]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.066">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.153 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.153 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.153 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.153 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.153 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.153 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.153 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.156 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.156 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.206 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.206 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.209 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.209 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.211 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.211 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.214 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.214 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.214 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.214 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.216 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.217 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: Card
]]></system-out>
  </testcase>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[7]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.068">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.219 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.219 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.219 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.219 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.219 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.219 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.219 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.222 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.222 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.273 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.273 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.275 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.275 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.278 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.278 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.280 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.280 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.281 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.281 [main] DEBUG org.hibernate.SQL - 
    select
        next_val as id_val 
    from
        transactions_SEQ
Hibernate: 
    select
        next_val as id_val 
    from
        transactions_SEQ
2025-07-03 23:42:45.281 [main] DEBUG org.hibernate.SQL - 
    update
        transactions_SEQ 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    update
        transactions_SEQ 
    set
        next_val= ? 
    where
        next_val=?
2025-07-03 23:42:45.283 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.285 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.285 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: CASH_ON_DELIVERY
]]></system-out>
  </testcase>
  <testcase name="validPaymentMethodFormats_VariousCases_AcceptedCorrectly(String)[8]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.066">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.288 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.288 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.288 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.288 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.288 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.288 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.288 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.290 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.290 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.341 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.341 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.344 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.344 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.346 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.347 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.349 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.349 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.349 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.350 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.352 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.352 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Valid payment method processed: cash_on_delivery
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[1]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.064">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.355 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.355 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.355 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.355 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.355 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.355 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.355 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.358 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.358 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.408 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.409 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.411 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.411 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.414 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.415 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
✅ Invalid payment method correctly rejected: 
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[2]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.061">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.419 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.419 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.419 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.419 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.419 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.420 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.420 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.423 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.423 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.473 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.473 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.476 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.476 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.478 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.478 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
✅ Invalid payment method correctly rejected:  
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[3]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.065">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.480 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.480 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.480 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.480 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.480 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.481 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.481 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.483 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.483 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.533 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.534 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.536 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.536 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.538 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.538 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.540 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.540 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.541 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.541 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.543 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.543 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Invalid payment method correctly rejected: INVALID
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[4]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.066">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.546 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.546 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.546 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.546 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.546 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.546 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.546 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.548 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.548 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.599 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.599 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.601 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.602 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.604 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.604 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.606 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.606 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.607 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.607 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.609 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.609 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Invalid payment method correctly rejected: CREDIT
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[5]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.169">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.612 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.612 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.612 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.612 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.612 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.612 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.612 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.614 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.614 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.665 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.665 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.667 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.667 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.669 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.670 [main] DEBUG org.hibernate.SQL - 
    select
        next_val as id_val 
    from
        orders_SEQ
Hibernate: 
    select
        next_val as id_val 
    from
        orders_SEQ
2025-07-03 23:42:45.670 [main] DEBUG org.hibernate.SQL - 
    update
        orders_SEQ 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    update
        orders_SEQ 
    set
        next_val= ? 
    where
        next_val=?
2025-07-03 23:42:45.672 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.672 [main] ERROR org.hibernate.orm.jdbc.batch - HHH100501: Exception executing batch [org.sqlite.SQLiteException: [SQLITE_BUSY_SNAPSHOT] Another database connection has already written to the database (database is locked)], SQL: insert into orders (actual_delivery_time,customer_id,delivery_address,estimated_delivery_time,notes,order_date,phone,restaurant_id,status,total_amount,id) values (?,?,?,?,?,?,?,?,?,?,?)
2025-07-03 23:42:45.672 [main] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 5, SQLState: null
2025-07-03 23:42:45.672 [main] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - [SQLITE_BUSY_SNAPSHOT] Another database connection has already written to the database (database is locked)
⚠️ Order save attempt 1 failed: org.hibernate.exception.LockAcquisitionException: could not execute batch [[SQLITE_BUSY_SNAPSHOT] Another database connection has already written to the database (database is locked)] [insert into orders (actual_delivery_time,customer_id,delivery_address,estimated_delivery_time,notes,order_date,phone,restaurant_id,status,total_amount,id) values (?,?,?,?,?,?,?,?,?,?,?)]
2025-07-03 23:42:45.773 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.773 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.776 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.776 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.776 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.777 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.779 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.779 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Invalid payment method correctly rejected: DEBIT
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[6]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.067">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.782 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.782 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.782 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.782 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.782 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.782 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.782 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.785 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.785 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.835 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.835 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.838 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.838 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.840 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.840 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.842 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.843 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.843 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.843 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.846 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.846 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Invalid payment method correctly rejected: BITCOIN
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[7]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.069">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.850 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.850 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.850 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.850 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.850 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.850 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.850 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.856 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.856 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.906 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.907 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.909 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.909 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.911 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.912 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.914 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.914 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.914 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.914 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.917 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.917 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Invalid payment method correctly rejected: PAYPAL
]]></system-out>
  </testcase>
  <testcase name="invalidPaymentMethodRejection_UnsupportedMethods_ThrowsException(String)[8]" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.066">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.919 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.920 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.920 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.920 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.920 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.920 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.920 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.922 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.922 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:45.973 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:45.973 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.975 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:45.975 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.977 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.978 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.980 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:45.980 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:45.980 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:45.981 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:45.983 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:45.983 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Invalid payment method correctly rejected: null
]]></system-out>
  </testcase>
  <testcase name="paymentMethodSecurityValidation_MaliciousInput_Sanitized" classname="com.myapp.payment.PaymentEdgeCaseTest$PaymentMethodValidationTests" time="0.082">
    <system-out><![CDATA[🧹 Cleaning up all transactions...
2025-07-03 23:42:45.985 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        notifications
Hibernate: 
    delete 
    from
        notifications
2025-07-03 23:42:45.986 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 23:42:45.986 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        order_items
Hibernate: 
    delete 
    from
        order_items
2025-07-03 23:42:45.986 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        orders
Hibernate: 
    delete 
    from
        orders
2025-07-03 23:42:45.986 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        food_items
Hibernate: 
    delete 
    from
        food_items
2025-07-03 23:42:45.986 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        restaurants
Hibernate: 
    delete 
    from
        restaurants
2025-07-03 23:42:45.986 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        users
Hibernate: 
    delete 
    from
        users
2025-07-03 23:42:45.988 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all test data from database
2025-07-03 23:42:45.988 [main] DEBUG c.myapp.common.TestDatabaseManager - Test database cleanup completed
✅ Database cleaned via TestDatabaseManager
2025-07-03 23:42:46.039 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.phone=?
2025-07-03 23:42:46.039 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        users
        (address, email, full_name, is_active, password_hash, phone, role, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:46.042 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
Hibernate: 
    select
        r1_0.id,
        r1_0.address,
        r1_0.name,
        r1_0.owner_id,
        r1_0.phone,
        r1_0.status 
    from
        restaurants r1_0 
    where
        r1_0.id=?
2025-07-03 23:42:46.042 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        restaurants
        (address, name, owner_id, phone, status, id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-07-03 23:42:46.044 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        oi1_0.price,
        oi1_0.quantity 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    where
        o1_0.id=?
2025-07-03 23:42:46.044 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        orders
        (actual_delivery_time, customer_id, delivery_address, estimated_delivery_time, notes, order_date, phone, restaurant_id, status, total_amount, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:46.047 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:46.047 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:46.047 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:46.048 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:46.050 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:46.050 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Malicious input correctly rejected: CARD'; DROP TABLE transactions; --
2025-07-03 23:42:46.052 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:46.052 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:46.053 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:46.053 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:46.055 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:46.055 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Malicious input correctly rejected: <script>alert('xss')</script>
2025-07-03 23:42:46.057 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:46.058 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:46.058 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:46.058 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:46.060 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:46.060 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Malicious input correctly rejected: CARD
CARD
2025-07-03 23:42:46.062 [main] DEBUG org.hibernate.SQL - 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
Hibernate: 
    select
        u1_0.id,
        u1_0.address,
        u1_0.email,
        u1_0.full_name,
        u1_0.is_active,
        u1_0.password_hash,
        u1_0.phone,
        u1_0.role 
    from
        users u1_0 
    where
        u1_0.id=?
2025-07-03 23:42:46.063 [main] DEBUG org.hibernate.SQL - 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
Hibernate: 
    select
        o1_0.id,
        o1_0.actual_delivery_time,
        o1_0.customer_id,
        o1_0.delivery_address,
        o1_0.estimated_delivery_time,
        o1_0.notes,
        o1_0.order_date,
        oi1_0.order_id,
        oi1_0.id,
        oi1_0.food_item_id,
        fi1_0.id,
        fi1_0.available,
        fi1_0.category,
        fi1_0.description,
        fi1_0.image_url,
        fi1_0.keywords,
        fi1_0.name,
        fi1_0.price,
        fi1_0.quantity,
        fi1_0.restaurant_id,
        oi1_0.price,
        oi1_0.quantity,
        o1_0.phone,
        o1_0.restaurant_id,
        o1_0.status,
        o1_0.total_amount 
    from
        orders o1_0 
    left join
        order_items oi1_0 
            on o1_0.id=oi1_0.order_id 
    left join
        food_items fi1_0 
            on fi1_0.id=oi1_0.food_item_id 
    where
        o1_0.id=?
2025-07-03 23:42:46.063 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.order_id=? 
    order by
        t1_0.created_at desc
2025-07-03 23:42:46.063 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        transactions
        (amount, created_at, description, order_id, payment_method, processed_at, reference_id, status, type, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 23:42:46.065 [main] DEBUG org.hibernate.SQL - 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
Hibernate: 
    select
        t1_0.id,
        t1_0.amount,
        t1_0.created_at,
        t1_0.description,
        t1_0.order_id,
        t1_0.payment_method,
        t1_0.processed_at,
        t1_0.reference_id,
        t1_0.status,
        t1_0.type,
        t1_0.updated_at,
        t1_0.user_id 
    from
        transactions t1_0 
    where
        t1_0.id=?
2025-07-03 23:42:46.065 [main] DEBUG org.hibernate.SQL - 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
Hibernate: 
    update
        transactions 
    set
        amount=?,
        created_at=?,
        description=?,
        order_id=?,
        payment_method=?,
        processed_at=?,
        reference_id=?,
        status=?,
        type=?,
        updated_at=?,
        user_id=? 
    where
        id=?
✅ Malicious input correctly rejected: CARD&amp#0;WALLET
]]></system-out>
  </testcase>
</testsuite>