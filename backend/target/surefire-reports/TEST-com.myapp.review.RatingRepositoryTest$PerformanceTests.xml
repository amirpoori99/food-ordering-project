<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.myapp.review.RatingRepositoryTest$PerformanceTests" time="0.142" tests="2" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\USER\Desktop\work space\food-ordering-project\backend\target\test-classes;C:\Users\USER\Desktop\work space\food-ordering-project\backend\target\classes;C:\Users\USER\.m2\repository\org\hibernate\orm\hibernate-core\6.4.0.Final\hibernate-core-6.4.0.Final.jar;C:\Users\USER\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\USER\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\USER\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\USER\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\USER\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\USER\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\USER\.m2\repository\net\bytebuddy\byte-buddy\1.14.7\byte-buddy-1.14.7.jar;C:\Users\USER\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\USER\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\USER\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\USER\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\USER\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\USER\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\USER\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\USER\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\USER\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\USER\.m2\repository\org\hibernate\orm\hibernate-community-dialects\6.2.13.Final\hibernate-community-dialects-6.2.13.Final.jar;C:\Users\USER\.m2\repository\org\xerial\sqlite-jdbc\3.44.0.0\sqlite-jdbc-3.44.0.0.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.2\jackson-core-2.15.2.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.2\jackson-databind-2.15.2.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.2\jackson-annotations-2.15.2.jar;C:\Users\USER\.m2\repository\org\slf4j\slf4j-api\2.0.9\slf4j-api-2.0.9.jar;C:\Users\USER\.m2\repository\ch\qos\logback\logback-classic\1.4.11\logback-classic-1.4.11.jar;C:\Users\USER\.m2\repository\ch\qos\logback\logback-core\1.4.11\logback-core-1.4.11.jar;C:\Users\USER\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\USER\.m2\repository\io\jsonwebtoken\jjwt-api\0.12.3\jjwt-api-0.12.3.jar;C:\Users\USER\.m2\repository\io\jsonwebtoken\jjwt-impl\0.12.3\jjwt-impl-0.12.3.jar;C:\Users\USER\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.12.3\jjwt-jackson-0.12.3.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.0\junit-jupiter-5.10.0.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.0\junit-jupiter-api-5.10.0.jar;C:\Users\USER\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\USER\.m2\repository\org\junit\platform\junit-platform-commons\1.10.0\junit-platform-commons-1.10.0.jar;C:\Users\USER\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.0\junit-jupiter-params-5.10.0.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.0\junit-jupiter-engine-5.10.0.jar;C:\Users\USER\.m2\repository\org\junit\platform\junit-platform-engine\1.10.0\junit-platform-engine-1.10.0.jar;C:\Users\USER\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\USER\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.9\byte-buddy-agent-1.14.9.jar;C:\Users\USER\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\USER\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\USER\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;C:\Users\USER\.m2\repository\org\testcontainers\junit-jupiter\1.19.3\junit-jupiter-1.19.3.jar;C:\Users\USER\.m2\repository\org\testcontainers\testcontainers\1.19.3\testcontainers-1.19.3.jar;C:\Users\USER\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\USER\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\USER\.m2\repository\org\apache\commons\commons-compress\1.24.0\commons-compress-1.24.0.jar;C:\Users\USER\.m2\repository\org\rnorth\duct-tape\duct-tape\1.0.8\duct-tape-1.0.8.jar;C:\Users\USER\.m2\repository\org\jetbrains\annotations\17.0.0\annotations-17.0.0.jar;C:\Users\USER\.m2\repository\com\github\docker-java\docker-java-api\3.3.4\docker-java-api-3.3.4.jar;C:\Users\USER\.m2\repository\com\github\docker-java\docker-java-transport-zerodep\3.3.4\docker-java-transport-zerodep-3.3.4.jar;C:\Users\USER\.m2\repository\com\github\docker-java\docker-java-transport\3.3.4\docker-java-transport-3.3.4.jar;C:\Users\USER\.m2\repository\net\java\dev\jna\jna\5.13.0\jna-5.13.0.jar;C:\Users\USER\.m2\repository\com\squareup\okhttp3\mockwebserver\4.11.0\mockwebserver-4.11.0.jar;C:\Users\USER\.m2\repository\com\squareup\okhttp3\okhttp\4.11.0\okhttp-4.11.0.jar;C:\Users\USER\.m2\repository\com\squareup\okio\okio\3.2.0\okio-3.2.0.jar;C:\Users\USER\.m2\repository\com\squareup\okio\okio-jvm\3.2.0\okio-jvm-3.2.0.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib\1.6.20\kotlin-stdlib-1.6.20.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-common\1.6.20\kotlin-stdlib-common-1.6.20.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk8\1.6.10\kotlin-stdlib-jdk8-1.6.10.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk7\1.6.10\kotlin-stdlib-jdk7-1.6.10.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.2\jackson-datatype-jsr310-2.15.2.jar;"/>
    <property name="java.vm.vendor" value="Eclipse Adoptium"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://adoptium.net/"/>
    <property name="user.timezone" value="Asia/Tehran"/>
    <property name="os.name" value="Windows 11"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="US"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-17.0.14.7-hotspot\bin"/>
    <property name="sun.java.command" value="C:\Users\USER\AppData\Local\Temp\surefire8236851155724109824\surefirebooter-20250703070855672_3.jar C:\Users\USER\AppData\Local\Temp\surefire8236851155724109824 2025-07-03T07-08-55_112-jvmRun1 surefire-20250703070855672_1tmp surefire_0-20250703070855672_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\USER\Desktop\work space\food-ordering-project\backend\target\test-classes;C:\Users\USER\Desktop\work space\food-ordering-project\backend\target\classes;C:\Users\USER\.m2\repository\org\hibernate\orm\hibernate-core\6.4.0.Final\hibernate-core-6.4.0.Final.jar;C:\Users\USER\.m2\repository\jakarta\persistence\jakarta.persistence-api\3.1.0\jakarta.persistence-api-3.1.0.jar;C:\Users\USER\.m2\repository\jakarta\transaction\jakarta.transaction-api\2.0.1\jakarta.transaction-api-2.0.1.jar;C:\Users\USER\.m2\repository\org\jboss\logging\jboss-logging\3.5.0.Final\jboss-logging-3.5.0.Final.jar;C:\Users\USER\.m2\repository\org\hibernate\common\hibernate-commons-annotations\6.0.6.Final\hibernate-commons-annotations-6.0.6.Final.jar;C:\Users\USER\.m2\repository\io\smallrye\jandex\3.1.2\jandex-3.1.2.jar;C:\Users\USER\.m2\repository\com\fasterxml\classmate\1.5.1\classmate-1.5.1.jar;C:\Users\USER\.m2\repository\net\bytebuddy\byte-buddy\1.14.7\byte-buddy-1.14.7.jar;C:\Users\USER\.m2\repository\jakarta\xml\bind\jakarta.xml.bind-api\4.0.0\jakarta.xml.bind-api-4.0.0.jar;C:\Users\USER\.m2\repository\jakarta\activation\jakarta.activation-api\2.1.0\jakarta.activation-api-2.1.0.jar;C:\Users\USER\.m2\repository\org\glassfish\jaxb\jaxb-runtime\4.0.2\jaxb-runtime-4.0.2.jar;C:\Users\USER\.m2\repository\org\glassfish\jaxb\jaxb-core\4.0.2\jaxb-core-4.0.2.jar;C:\Users\USER\.m2\repository\org\eclipse\angus\angus-activation\2.0.0\angus-activation-2.0.0.jar;C:\Users\USER\.m2\repository\org\glassfish\jaxb\txw2\4.0.2\txw2-4.0.2.jar;C:\Users\USER\.m2\repository\com\sun\istack\istack-commons-runtime\4.1.1\istack-commons-runtime-4.1.1.jar;C:\Users\USER\.m2\repository\jakarta\inject\jakarta.inject-api\2.0.1\jakarta.inject-api-2.0.1.jar;C:\Users\USER\.m2\repository\org\antlr\antlr4-runtime\4.13.0\antlr4-runtime-4.13.0.jar;C:\Users\USER\.m2\repository\org\hibernate\orm\hibernate-community-dialects\6.2.13.Final\hibernate-community-dialects-6.2.13.Final.jar;C:\Users\USER\.m2\repository\org\xerial\sqlite-jdbc\3.44.0.0\sqlite-jdbc-3.44.0.0.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\core\jackson-core\2.15.2\jackson-core-2.15.2.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\core\jackson-databind\2.15.2\jackson-databind-2.15.2.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\core\jackson-annotations\2.15.2\jackson-annotations-2.15.2.jar;C:\Users\USER\.m2\repository\org\slf4j\slf4j-api\2.0.9\slf4j-api-2.0.9.jar;C:\Users\USER\.m2\repository\ch\qos\logback\logback-classic\1.4.11\logback-classic-1.4.11.jar;C:\Users\USER\.m2\repository\ch\qos\logback\logback-core\1.4.11\logback-core-1.4.11.jar;C:\Users\USER\.m2\repository\org\mindrot\jbcrypt\0.4\jbcrypt-0.4.jar;C:\Users\USER\.m2\repository\io\jsonwebtoken\jjwt-api\0.12.3\jjwt-api-0.12.3.jar;C:\Users\USER\.m2\repository\io\jsonwebtoken\jjwt-impl\0.12.3\jjwt-impl-0.12.3.jar;C:\Users\USER\.m2\repository\io\jsonwebtoken\jjwt-jackson\0.12.3\jjwt-jackson-0.12.3.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter\5.10.0\junit-jupiter-5.10.0.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.10.0\junit-jupiter-api-5.10.0.jar;C:\Users\USER\.m2\repository\org\opentest4j\opentest4j\1.3.0\opentest4j-1.3.0.jar;C:\Users\USER\.m2\repository\org\junit\platform\junit-platform-commons\1.10.0\junit-platform-commons-1.10.0.jar;C:\Users\USER\.m2\repository\org\apiguardian\apiguardian-api\1.1.2\apiguardian-api-1.1.2.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter-params\5.10.0\junit-jupiter-params-5.10.0.jar;C:\Users\USER\.m2\repository\org\junit\jupiter\junit-jupiter-engine\5.10.0\junit-jupiter-engine-5.10.0.jar;C:\Users\USER\.m2\repository\org\junit\platform\junit-platform-engine\1.10.0\junit-platform-engine-1.10.0.jar;C:\Users\USER\.m2\repository\org\mockito\mockito-core\5.7.0\mockito-core-5.7.0.jar;C:\Users\USER\.m2\repository\net\bytebuddy\byte-buddy-agent\1.14.9\byte-buddy-agent-1.14.9.jar;C:\Users\USER\.m2\repository\org\objenesis\objenesis\3.3\objenesis-3.3.jar;C:\Users\USER\.m2\repository\org\assertj\assertj-core\3.24.2\assertj-core-3.24.2.jar;C:\Users\USER\.m2\repository\com\h2database\h2\2.2.224\h2-2.2.224.jar;C:\Users\USER\.m2\repository\org\testcontainers\junit-jupiter\1.19.3\junit-jupiter-1.19.3.jar;C:\Users\USER\.m2\repository\org\testcontainers\testcontainers\1.19.3\testcontainers-1.19.3.jar;C:\Users\USER\.m2\repository\junit\junit\4.13.2\junit-4.13.2.jar;C:\Users\USER\.m2\repository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;C:\Users\USER\.m2\repository\org\apache\commons\commons-compress\1.24.0\commons-compress-1.24.0.jar;C:\Users\USER\.m2\repository\org\rnorth\duct-tape\duct-tape\1.0.8\duct-tape-1.0.8.jar;C:\Users\USER\.m2\repository\org\jetbrains\annotations\17.0.0\annotations-17.0.0.jar;C:\Users\USER\.m2\repository\com\github\docker-java\docker-java-api\3.3.4\docker-java-api-3.3.4.jar;C:\Users\USER\.m2\repository\com\github\docker-java\docker-java-transport-zerodep\3.3.4\docker-java-transport-zerodep-3.3.4.jar;C:\Users\USER\.m2\repository\com\github\docker-java\docker-java-transport\3.3.4\docker-java-transport-3.3.4.jar;C:\Users\USER\.m2\repository\net\java\dev\jna\jna\5.13.0\jna-5.13.0.jar;C:\Users\USER\.m2\repository\com\squareup\okhttp3\mockwebserver\4.11.0\mockwebserver-4.11.0.jar;C:\Users\USER\.m2\repository\com\squareup\okhttp3\okhttp\4.11.0\okhttp-4.11.0.jar;C:\Users\USER\.m2\repository\com\squareup\okio\okio\3.2.0\okio-3.2.0.jar;C:\Users\USER\.m2\repository\com\squareup\okio\okio-jvm\3.2.0\okio-jvm-3.2.0.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib\1.6.20\kotlin-stdlib-1.6.20.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-common\1.6.20\kotlin-stdlib-common-1.6.20.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk8\1.6.10\kotlin-stdlib-jdk8-1.6.10.jar;C:\Users\USER\.m2\repository\org\jetbrains\kotlin\kotlin-stdlib-jdk7\1.6.10\kotlin-stdlib-jdk7-1.6.10.jar;C:\Users\USER\.m2\repository\com\fasterxml\jackson\datatype\jackson-datatype-jsr310\2.15.2\jackson-datatype-jsr310-2.15.2.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\USER"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="C:\Program Files\Eclipse Adoptium\jdk-17.0.14.7-hotspot"/>
    <property name="spring.profiles.active" value="test"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\USER\Desktop\work space\food-ordering-project\backend"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="java.awt.headless" value="true"/>
    <property name="surefire.real.class.path" value="C:\Users\USER\AppData\Local\Temp\surefire8236851155724109824\surefirebooter-20250703070855672_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.14+7"/>
    <property name="user.name" value="USER"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Temurin-17.0.14+7"/>
    <property name="localRepository" value="C:\Users\USER\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/adoptium/adoptium-support/issues"/>
    <property name="java.io.tmpdir" value="C:\Users\USER\AppData\Local\Temp\"/>
    <property name="java.version" value="17.0.14"/>
    <property name="user.dir" value="C:\Users\USER\Desktop\work space\food-ordering-project\backend"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Eclipse Adoptium\jdk-17.0.14.7-hotspot\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\mingw64\mingw64\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files\Eclipse Adoptium\jdk-17.0.14.7-hotspot\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\dotnet\;C:\Program Files (x86)\AOMEI;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\WINDOWS\System32\OpenSSH\;C:\Program Files\Microsoft VS Code\bin;C:\mingw64\mingw64\bin;C:\raylib-master\src;C:\Program Files\Git\cmd;C:\Program Files\Redis\;C:\Users\USER\AppData\Local\Programs\Python\Python313\Scripts\;C:\Users\USER\AppData\Local\Programs\Python\Python313\;C:\Users\USER\AppData\Local\Programs\Python\Launcher\;C:\Users\USER\AppData\Local\Programs\Python\Python312\Scripts\;C:\Users\USER\AppData\Local\Programs\Python\Python312\;C:\Users\USER\AppData\Local\Microsoft\WindowsApps;C:\mingw64\mingw64\bin;C:\raylib-master\src;C:\Program Files\Java\jdk-23\bin;C:\modeltech64_2020.4\win64;C:\apache-maven\apache-maven-3.9.9\bin;C:\Program Files\JetBrains\IntelliJ IDEA 2025.1.1.1\bin;;C:\Users\USER\AppData\Local\Programs\cursor\resources\app\bin;;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Eclipse Adoptium"/>
    <property name="java.vm.version" value="17.0.14+7"/>
    <property name="java.specification.maintenance.version" value="1"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="shouldHandleComplexQueriesEfficiently" classname="com.myapp.review.RatingRepositoryTest$PerformanceTests" time="0.068">
    <system-out><![CDATA[2025-07-03 07:10:26.253 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 07:10:26.254 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all rating data from test database
2025-07-03 07:10:26.255 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=159, userId=1, restaurantId=2, ratingScore=1, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.255847800}
2025-07-03 07:10:26.255 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.256 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=160, userId=1, restaurantId=2, ratingScore=2, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.256847200}
2025-07-03 07:10:26.257 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.258 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=161, userId=1, restaurantId=2, ratingScore=3, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.258849800}
2025-07-03 07:10:26.258 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.260 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=162, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.259845500}
2025-07-03 07:10:26.260 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.262 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=163, userId=1, restaurantId=2, ratingScore=5, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.262847900}
2025-07-03 07:10:26.262 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.264 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=164, userId=1, restaurantId=2, ratingScore=1, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.264848300}
2025-07-03 07:10:26.264 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.265 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=165, userId=1, restaurantId=2, ratingScore=2, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.265845700}
2025-07-03 07:10:26.265 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.267 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=166, userId=1, restaurantId=2, ratingScore=3, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.267849}
2025-07-03 07:10:26.267 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.269 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=167, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.268850500}
2025-07-03 07:10:26.270 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.271 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=168, userId=1, restaurantId=2, ratingScore=5, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.271847}
2025-07-03 07:10:26.272 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.273 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=169, userId=1, restaurantId=2, ratingScore=1, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.273848500}
2025-07-03 07:10:26.273 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.274 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=170, userId=1, restaurantId=2, ratingScore=2, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.274847}
2025-07-03 07:10:26.274 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.275 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=171, userId=1, restaurantId=2, ratingScore=3, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.275847400}
2025-07-03 07:10:26.276 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.277 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=172, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.277849}
2025-07-03 07:10:26.277 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.278 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=173, userId=1, restaurantId=2, ratingScore=5, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.278846900}
2025-07-03 07:10:26.279 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.280 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=174, userId=1, restaurantId=2, ratingScore=1, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.280846200}
2025-07-03 07:10:26.280 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.281 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=175, userId=1, restaurantId=2, ratingScore=2, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.281845800}
2025-07-03 07:10:26.282 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.283 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=176, userId=1, restaurantId=2, ratingScore=3, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.283846100}
2025-07-03 07:10:26.283 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.284 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=177, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.284844500}
2025-07-03 07:10:26.284 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.286 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=178, userId=1, restaurantId=2, ratingScore=5, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.285848600}
2025-07-03 07:10:26.286 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.298 [main] DEBUG org.hibernate.SQL - 
    select
        avg(r1_0.rating_score) 
    from
        ratings r1_0 
    where
        r1_0.restaurant_id=?
Hibernate: 
    select
        avg(r1_0.rating_score) 
    from
        ratings r1_0 
    where
        r1_0.restaurant_id=?
2025-07-03 07:10:26.299 [main] DEBUG org.hibernate.SQL - 
    select
        count(r1_0.id) 
    from
        ratings r1_0 
    where
        r1_0.restaurant_id=?
Hibernate: 
    select
        count(r1_0.id) 
    from
        ratings r1_0 
    where
        r1_0.restaurant_id=?
2025-07-03 07:10:26.303 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.rating_score,
        count(r1_0.id) 
    from
        ratings r1_0 
    where
        r1_0.restaurant_id=? 
    group by
        r1_0.rating_score
Hibernate: 
    select
        r1_0.rating_score,
        count(r1_0.id) 
    from
        ratings r1_0 
    where
        r1_0.restaurant_id=? 
    group by
        r1_0.rating_score
2025-07-03 07:10:26.318 [main] DEBUG org.hibernate.SQL - 
    select
        r1_0.id,
        r1_0.created_at,
        r1_0.helpful_count,
        r1_0.is_verified,
        r1_0.rating_score,
        r1_0.restaurant_id,
        r1_0.review_text,
        r1_0.updated_at,
        r1_0.user_id 
    from
        ratings r1_0 
    where
        r1_0.rating_score between ? and ? 
    order by
        r1_0.created_at desc
Hibernate: 
    select
        r1_0.id,
        r1_0.created_at,
        r1_0.helpful_count,
        r1_0.is_verified,
        r1_0.rating_score,
        r1_0.restaurant_id,
        r1_0.review_text,
        r1_0.updated_at,
        r1_0.user_id 
    from
        ratings r1_0 
    where
        r1_0.rating_score between ? and ? 
    order by
        r1_0.created_at desc
]]></system-out>
  </testcase>
  <testcase name="shouldHandleBulkOperationsEfficiently" classname="com.myapp.review.RatingRepositoryTest$PerformanceTests" time="0.073">
    <system-out><![CDATA[2025-07-03 07:10:26.321 [main] DEBUG org.hibernate.SQL - 
    delete 
    from
        ratings
Hibernate: 
    delete 
    from
        ratings
2025-07-03 07:10:26.322 [main] DEBUG c.myapp.common.TestDatabaseManager - Cleaned all rating data from test database
2025-07-03 07:10:26.322 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=179, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.322386200}
2025-07-03 07:10:26.323 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.324 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=180, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.324384300}
2025-07-03 07:10:26.324 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.325 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=181, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.325383900}
2025-07-03 07:10:26.326 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.327 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=182, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.326382200}
2025-07-03 07:10:26.327 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.328 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=183, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.328385300}
2025-07-03 07:10:26.329 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.330 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=184, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.330386100}
2025-07-03 07:10:26.330 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.332 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=185, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.331383500}
2025-07-03 07:10:26.332 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.333 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=186, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.333384500}
2025-07-03 07:10:26.333 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.335 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=187, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.335388200}
2025-07-03 07:10:26.335 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.337 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=188, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.337385800}
2025-07-03 07:10:26.337 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.338 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=189, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.338381900}
2025-07-03 07:10:26.339 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.340 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=190, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.340388400}
2025-07-03 07:10:26.340 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.341 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=191, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.341385500}
2025-07-03 07:10:26.341 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.342 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=192, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.342385800}
2025-07-03 07:10:26.343 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.344 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=193, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.344385700}
2025-07-03 07:10:26.344 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.346 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=194, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.346384600}
2025-07-03 07:10:26.346 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.347 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=195, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.347384900}
2025-07-03 07:10:26.347 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.348 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=196, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.348385}
2025-07-03 07:10:26.349 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.350 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=197, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.350382800}
2025-07-03 07:10:26.350 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.351 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=198, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.351383800}
2025-07-03 07:10:26.351 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.353 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=199, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.353386300}
2025-07-03 07:10:26.353 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.354 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=200, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.354381500}
2025-07-03 07:10:26.355 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.356 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=201, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.356385500}
2025-07-03 07:10:26.356 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.357 [main] DEBUG org.hibernate.SQL - 
    select
        next_val as id_val 
    from
        ratings_SEQ
Hibernate: 
    select
        next_val as id_val 
    from
        ratings_SEQ
2025-07-03 07:10:26.357 [main] DEBUG org.hibernate.SQL - 
    update
        ratings_SEQ 
    set
        next_val= ? 
    where
        next_val=?
Hibernate: 
    update
        ratings_SEQ 
    set
        next_val= ? 
    where
        next_val=?
2025-07-03 07:10:26.358 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=202, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.357383100}
2025-07-03 07:10:26.358 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.360 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=203, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.359385600}
2025-07-03 07:10:26.360 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.361 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=204, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.361385500}
2025-07-03 07:10:26.362 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.363 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=205, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.363382400}
2025-07-03 07:10:26.363 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.364 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=206, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.364384600}
2025-07-03 07:10:26.365 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.366 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=207, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.366384100}
2025-07-03 07:10:26.366 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.367 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=208, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.367384200}
2025-07-03 07:10:26.367 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.368 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=209, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.368384}
2025-07-03 07:10:26.369 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.370 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=210, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.370384700}
2025-07-03 07:10:26.371 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.372 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=211, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.372383800}
2025-07-03 07:10:26.372 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.373 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=212, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.373385100}
2025-07-03 07:10:26.373 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.374 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=213, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.374383600}
2025-07-03 07:10:26.374 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.375 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=214, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.375382300}
2025-07-03 07:10:26.375 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.376 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=215, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.376382700}
2025-07-03 07:10:26.376 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.377 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=216, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.377385100}
2025-07-03 07:10:26.378 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.379 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=217, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.379382900}
2025-07-03 07:10:26.379 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.380 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=218, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.380383400}
2025-07-03 07:10:26.380 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.381 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=219, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.381382100}
2025-07-03 07:10:26.382 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.383 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=220, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.382383800}
2025-07-03 07:10:26.383 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.384 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=221, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.384385600}
2025-07-03 07:10:26.384 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.385 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=222, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.385390900}
2025-07-03 07:10:26.385 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.386 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=223, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.386382500}
2025-07-03 07:10:26.386 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.387 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=224, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.387381600}
2025-07-03 07:10:26.387 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.388 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=225, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.388385600}
2025-07-03 07:10:26.389 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.389 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=226, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.389383200}
2025-07-03 07:10:26.390 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.390 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=227, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.390383800}
2025-07-03 07:10:26.391 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
2025-07-03 07:10:26.391 [main] INFO  com.myapp.review.RatingRepository - Created new rating: Rating{id=228, userId=1, restaurantId=2, ratingScore=4, hasReview=true, isVerified=false, helpfulCount=0, createdAt=2025-07-03T07:10:26.391383900}
2025-07-03 07:10:26.392 [main] DEBUG org.hibernate.SQL - 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        ratings
        (created_at, helpful_count, is_verified, rating_score, restaurant_id, review_text, updated_at, user_id, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, ?, ?)
]]></system-out>
  </testcase>
</testsuite>