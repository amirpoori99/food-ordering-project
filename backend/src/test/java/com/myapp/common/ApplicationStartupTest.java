package com.myapp.common;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Timeout;
import static org.junit.jupiter.api.Assertions.*;

import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.URI;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.io.IOException;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;

/**
 * Ú©Ù„Ø§Ø³ ØªØ³Øª Ø¨Ø±Ø§ÛŒ Ø¨Ø±Ø±Ø³ÛŒ Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ ØµØ­ÛŒØ­ Ø¨Ø±Ù†Ø§Ù…Ù‡
 * Ø§ÛŒÙ† Ú©Ù„Ø§Ø³ Ø´Ø§Ù…Ù„ ØªØ³Øªâ€ŒÙ‡Ø§ÛŒ Ù…Ø±Ø¨ÙˆØ· Ø¨Ù‡ startup process Ùˆ health check Ù‡Ø§ÛŒ Ø§ÙˆÙ„ÛŒÙ‡ Ø§Ø³Øª
 */
@DisplayName("ØªØ³Øªâ€ŒÙ‡Ø§ÛŒ Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ Ø¨Ø±Ù†Ø§Ù…Ù‡")
class ApplicationStartupTest {

    private HttpClient httpClient;
    private MockWebServer mockWebServer;
    private String baseUrl;
    private static final int SERVER_START_TIMEOUT = 30; // Ø«Ø§Ù†ÛŒÙ‡

    /**
     * Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ Ø§ÙˆÙ„ÛŒÙ‡ Ù‚Ø¨Ù„ Ø§Ø² Ù‡Ø± ØªØ³Øª
     * Ø§ÛŒØ¬Ø§Ø¯ HTTP client Ø¨Ø±Ø§ÛŒ Ø§Ø±Ø³Ø§Ù„ Ø¯Ø±Ø®ÙˆØ§Ø³Øªâ€ŒÙ‡Ø§
     */
    @BeforeEach
    void setUp() throws IOException {
        httpClient = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(10))
                .build();
        mockWebServer = new MockWebServer();
        mockWebServer.start();
        baseUrl = mockWebServer.url("").toString().replaceAll("/$", "");
        
        // Ø¨Ø±Ø§ÛŒ Ù…Ø±Ø­Ù„Ù‡ 1: ØªØ³Øªâ€ŒÙ‡Ø§ÛŒ unit Ø¨Ø¯ÙˆÙ† Ù†ÛŒØ§Ø² Ø¨Ù‡ Ø³Ø±ÙˆØ±
        System.out.println("ðŸ“‹ Ø¢Ù…Ø§Ø¯Ù‡â€ŒØ³Ø§Ø²ÛŒ ØªØ³Øªâ€ŒÙ‡Ø§ÛŒ Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ...");
    }

    /**
     * ØªÙ…ÛŒØ²Ú©Ø§Ø±ÛŒ Ø¨Ø¹Ø¯ Ø§Ø² Ù‡Ø± ØªØ³Øª
     */
    @AfterEach
    void tearDown() throws IOException {
        if (mockWebServer != null) {
            mockWebServer.shutdown();
        }
    }

    /**
     * ØªØ³Øª Ø§ØµÙ„ÛŒ Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ Ø³Ø±ÙˆØ±
     * Ø¨Ø±Ø±Ø³ÛŒ Ø§ÛŒÙ†Ú©Ù‡ Ø³Ø±ÙˆØ± Ø¨Ø± Ø±ÙˆÛŒ Ù¾ÙˆØ±Øª 8081 Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ Ø´Ø¯Ù‡ Ø§Ø³Øª
     */
    @Test
    @DisplayName("Ø³Ø±ÙˆØ± Ø¨Ø§ÛŒØ¯ Ø¨Ø± Ø±ÙˆÛŒ Ù¾ÙˆØ±Øª 8081 Ø±Ø§Ù‡â€ŒØ§Ù†Ø¯Ø§Ø²ÛŒ Ø´ÙˆØ¯ (Mocked)")
    @Timeout(value = 30, unit = TimeUnit.SECONDS)
    void testServerStartup() throws Exception {
        mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"UP\",\"service\":\"food-ordering-backend\"}"));
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + "/health"))
                .timeout(Duration.ofSeconds(5))
                .GET()
                .build();
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        assertEquals(200, response.statusCode());
        assertTrue(response.body().contains("\"status\""));
    }

    /**
     * ØªØ³Øª endpoint Ø³Ù„Ø§Ù…Øª Ø³Ø±ÙˆØ± (/health)
     * Ø¨Ø±Ø±Ø³ÛŒ Ù¾Ø§Ø³Ø® ØµØ­ÛŒØ­ health check
     */
    @Test
    @DisplayName("Health endpoint Ø¨Ø§ÛŒØ¯ Ù¾Ø§Ø³Ø® ØµØ­ÛŒØ­ Ø¨Ø±Ú¯Ø±Ø¯Ø§Ù†Ø¯ (Mocked)")
    @Timeout(value = 30, unit = TimeUnit.SECONDS)
    void testHealthEndpoint() throws IOException, InterruptedException {
        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setHeader("Content-Type", "application/json")
                .setBody("{\"status\":\"UP\",\"service\":\"food-ordering-backend\"}"));
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + "/health"))
                .timeout(Duration.ofSeconds(5))
                .header("Accept", "application/json")
                .GET()
                .build();
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        assertEquals(200, response.statusCode());
        assertTrue(response.headers().firstValue("Content-Type").orElse("").contains("application/json"));
        String responseBody = response.body();
        assertNotNull(responseBody);
        assertFalse(responseBody.trim().isEmpty());
        assertTrue(responseBody.contains("\"status\""));
        assertTrue(responseBody.contains("\"service\""));
        assertTrue(responseBody.contains("UP"));
        assertTrue(responseBody.contains("food-ordering-backend"));
    }

    /**
     * ØªØ³Øª endpoint ØªØ³Øª Ø³Ø§Ø¯Ù‡ (/api/test)
     * Ø¨Ø±Ø±Ø³ÛŒ Ø¹Ù…Ù„Ú©Ø±Ø¯ endpoint Ù¾Ø§ÛŒÙ‡
     */
    @Test
    @DisplayName("Test endpoint Ø¨Ø§ÛŒØ¯ Ù¾Ø§Ø³Ø® ØµØ­ÛŒØ­ Ø¨Ø±Ú¯Ø±Ø¯Ø§Ù†Ø¯ (Mocked)")
    @Timeout(value = 30, unit = TimeUnit.SECONDS)
    void testTestEndpoint() throws IOException, InterruptedException {
        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setHeader("Content-Type", "application/json")
                .setBody("{\"message\":\"Hello from Food Ordering Backend!\",\"timestamp\":1234567890}"));
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + "/api/test"))
                .timeout(Duration.ofSeconds(5))
                .header("Accept", "application/json")
                .GET()
                .build();
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        assertEquals(200, response.statusCode());
        String responseBody = response.body();
        assertNotNull(responseBody);
        assertTrue(responseBody.contains("\"message\""));
        assertTrue(responseBody.contains("\"timestamp\""));
        assertTrue(responseBody.contains("Hello from Food Ordering Backend!"));
    }

    /**
     * ØªØ³Øª Ø²Ù…Ø§Ù† Ù¾Ø§Ø³Ø®â€ŒØ¯Ù‡ÛŒ Ø³Ø±ÙˆØ±
     * Ø§Ø·Ù…ÛŒÙ†Ø§Ù† Ø§Ø² Ø§ÛŒÙ†Ú©Ù‡ Ø³Ø±ÙˆØ± Ø¯Ø± Ø²Ù…Ø§Ù† Ù…Ù†Ø§Ø³Ø¨ Ù¾Ø§Ø³Ø® Ù…ÛŒâ€ŒØ¯Ù‡Ø¯
     */
    @Test
    @DisplayName("Ø³Ø±ÙˆØ± Ø¨Ø§ÛŒØ¯ Ø¯Ø± Ø²Ù…Ø§Ù† Ù…Ù†Ø§Ø³Ø¨ Ù¾Ø§Ø³Ø® Ø¯Ù‡Ø¯ (Mocked)")
    @Timeout(value = 5, unit = TimeUnit.SECONDS)
    void testServerResponseTime() throws IOException, InterruptedException {
        mockWebServer.enqueue(new MockResponse().setResponseCode(200).setBody("{\"status\":\"UP\"}"));
        long startTime = System.currentTimeMillis();
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + "/health"))
                .timeout(Duration.ofSeconds(3))
                .GET()
                .build();
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        long endTime = System.currentTimeMillis();
        long responseTime = endTime - startTime;
        assertEquals(200, response.statusCode());
        assertTrue(responseTime < 3000, String.format("Ø²Ù…Ø§Ù† Ù¾Ø§Ø³Ø® (%d ms) Ø¨Ø§ÛŒØ¯ Ú©Ù…ØªØ± Ø§Ø² 3 Ø«Ø§Ù†ÛŒÙ‡ Ø¨Ø§Ø´Ø¯", responseTime));
    }

    /**
     * ØªØ³Øª CORS headers
     * Ø¨Ø±Ø±Ø³ÛŒ Ø§ÛŒÙ†Ú©Ù‡ Ø³Ø±ÙˆØ± header Ù‡Ø§ÛŒ CORS Ù…Ù†Ø§Ø³Ø¨ Ø§Ø±Ø³Ø§Ù„ Ù…ÛŒâ€ŒÚ©Ù†Ø¯
     */
    @Test
    @DisplayName("Ø³Ø±ÙˆØ± Ø¨Ø§ÛŒØ¯ CORS headers ØµØ­ÛŒØ­ Ø§Ø±Ø³Ø§Ù„ Ú©Ù†Ø¯ (Mocked)")
    @Timeout(value = 30, unit = TimeUnit.SECONDS)
    void testCORSHeaders() throws IOException, InterruptedException {
        mockWebServer.enqueue(new MockResponse()
                .setResponseCode(200)
                .setHeader("Access-Control-Allow-Origin", "*")
                .setHeader("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE")
                .setHeader("Access-Control-Allow-Headers", "Content-Type,Authorization")
                .setBody("{}"));
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(baseUrl + "/api/test"))
                .timeout(Duration.ofSeconds(5))
                .header("Origin", "http://localhost:3000")
                .header("Access-Control-Request-Method", "GET")
                .GET()
                .build();
        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());
        assertEquals(200, response.statusCode());
        assertEquals("*", response.headers().firstValue("Access-Control-Allow-Origin").orElse(""));
        assertTrue(response.headers().firstValue("Access-Control-Allow-Methods").orElse("").contains("GET"));
        assertTrue(response.headers().firstValue("Access-Control-Allow-Headers").orElse("").contains("Authorization"));
    }

    /**
     * ØªØ³Øª Ù¾Ø§ÛŒÙ‡ Ø¨Ø±Ø§ÛŒ Ù…Ø±Ø­Ù„Ù‡ 1
     * ØªØ³Øª Ú©Ù„Ø§Ø³â€ŒÙ‡Ø§ÛŒ Ø§ØµÙ„ÛŒ Ø¨Ø±Ù†Ø§Ù…Ù‡ Ø¨Ø¯ÙˆÙ† Ù†ÛŒØ§Ø² Ø¨Ù‡ Ø³Ø±ÙˆØ±
     */
    @Test
    @DisplayName("Ú©Ù„Ø§Ø³â€ŒÙ‡Ø§ÛŒ Ø§ØµÙ„ÛŒ Ø¨Ø±Ù†Ø§Ù…Ù‡ Ø¨Ø§ÛŒØ¯ Ù‚Ø§Ø¨Ù„ Ø¯Ø³ØªØ±Ø³ÛŒ Ø¨Ø§Ø´Ù†Ø¯")
    void testBasicApplicationClasses() {
        // ØªØ³Øª Ø¯Ø³ØªØ±Ø³ÛŒ Ø¨Ù‡ Ú©Ù„Ø§Ø³ Ø§ØµÙ„ÛŒ ServerApp
        assertDoesNotThrow(() -> {
            Class<?> serverAppClass = Class.forName("com.myapp.ServerApp");
            assertNotNull(serverAppClass, "Ú©Ù„Ø§Ø³ ServerApp Ø¨Ø§ÛŒØ¯ Ù…ÙˆØ¬ÙˆØ¯ Ø¨Ø§Ø´Ø¯");
            System.out.println("âœ… Ú©Ù„Ø§Ø³ ServerApp ØªØ£ÛŒÛŒØ¯ Ø´Ø¯");
        }, "Ú©Ù„Ø§Ø³ ServerApp Ø¨Ø§ÛŒØ¯ Ù‚Ø§Ø¨Ù„ Ø¯Ø³ØªØ±Ø³ÛŒ Ø¨Ø§Ø´Ø¯");

        // ØªØ³Øª Ø¯Ø³ØªØ±Ø³ÛŒ Ø¨Ù‡ Ú©Ù„Ø§Ø³â€ŒÙ‡Ø§ÛŒ Ù…Ù‡Ù… Ø¯ÛŒÚ¯Ø±
        String[] importantClasses = {
            "com.myapp.auth.AuthService",
            "com.myapp.auth.AuthRepository", 
            "com.myapp.common.utils.DatabaseUtil",
            "com.myapp.common.models.User"
        };

        for (String className : importantClasses) {
            assertDoesNotThrow(() -> {
                Class.forName(className);
                System.out.println("âœ… Ú©Ù„Ø§Ø³ " + className + " ØªØ£ÛŒÛŒØ¯ Ø´Ø¯");
            }, "Ú©Ù„Ø§Ø³ " + className + " Ø¨Ø§ÛŒØ¯ Ù‚Ø§Ø¨Ù„ Ø¯Ø³ØªØ±Ø³ÛŒ Ø¨Ø§Ø´Ø¯");
        }
    }

    /**
     * ØªØ³Øª HTTP Client
     * Ø§Ø·Ù…ÛŒÙ†Ø§Ù† Ø§Ø² Ø¹Ù…Ù„Ú©Ø±Ø¯ ØµØ­ÛŒØ­ HTTP Client Ø¨Ø±Ø§ÛŒ Ù…Ø±Ø§Ø­Ù„ Ø¨Ø¹Ø¯
     */
    @Test 
    @DisplayName("HTTP Client Ø¨Ø§ÛŒØ¯ ØµØ­ÛŒØ­ Ù¾ÛŒÚ©Ø±Ø¨Ù†Ø¯ÛŒ Ø´Ø¯Ù‡ Ø¨Ø§Ø´Ø¯")
    void testHttpClientConfiguration() {
        assertNotNull(httpClient, "HTTP Client Ù†Ø¨Ø§ÛŒØ¯ null Ø¨Ø§Ø´Ø¯");
        
        // ØªØ³Øª Ø§ÛŒØ¬Ø§Ø¯ Ø¯Ø±Ø®ÙˆØ§Ø³Øª Ø³Ø§Ø¯Ù‡
        assertDoesNotThrow(() -> {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("http://example.com"))
                    .timeout(Duration.ofSeconds(5))
                    .GET()
                    .build();
            
            assertNotNull(request, "HTTP Request Ù†Ø¨Ø§ÛŒØ¯ null Ø¨Ø§Ø´Ø¯");
            assertEquals("GET", request.method(), "Ù†ÙˆØ¹ Ø¯Ø±Ø®ÙˆØ§Ø³Øª Ø¨Ø§ÛŒØ¯ GET Ø¨Ø§Ø´Ø¯");
            
            System.out.println("âœ… HTTP Client ØµØ­ÛŒØ­ Ù¾ÛŒÚ©Ø±Ø¨Ù†Ø¯ÛŒ Ø´Ø¯Ù‡");
        }, "Ø§ÛŒØ¬Ø§Ø¯ HTTP Request Ù†Ø¨Ø§ÛŒØ¯ Ø®Ø·Ø§ ØªÙˆÙ„ÛŒØ¯ Ú©Ù†Ø¯");
    }
} 