# Food Ordering System - Vulnerability Scanner
# Phase 44: Security Hardening

Write-Host "üîç Food Ordering System - Vulnerability Scanner" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan

$PROJECT_ROOT = Split-Path -Parent (Split-Path -Parent $MyInvocation.MyCommand.Definition)
$TIMESTAMP = Get-Date -Format "yyyyMMdd-HHmmss"

# Vulnerability counters
$CriticalVulns = 0
$HighVulns = 0  
$MediumVulns = 0
$LowVulns = 0
$Vulnerabilities = @()

function Add-Vulnerability {
    param($Category, $Title, $Severity, $File, $Description, $CVSS, $Remediation)
    
    $vuln = New-Object PSObject -Property @{
        Category = $Category
        Title = $Title
        Severity = $Severity
        File = $File
        Description = $Description
        CVSS = $CVSS
        Remediation = $Remediation
    }
    
    $script:Vulnerabilities += $vuln
    
    switch ($Severity) {
        "CRITICAL" { $script:CriticalVulns++; $color = "Red" }
        "HIGH" { $script:HighVulns++; $color = "Red" }
        "MEDIUM" { $script:MediumVulns++; $color = "Yellow" }
        "LOW" { $script:LowVulns++; $color = "Gray" }
    }
    
    Write-Host "üö® [$Severity] $Title (CVSS: $CVSS)" -ForegroundColor $color
}

# OWASP Top 10 Vulnerability Checks
Write-Host "`nüîç Scanning for OWASP Top 10 Vulnerabilities..." -ForegroundColor Cyan

# A01: Broken Access Control
Write-Host "`nüîê Checking for Broken Access Control..." -ForegroundColor Yellow

$javaFiles = Get-ChildItem "$PROJECT_ROOT\backend\src" -Filter "*.java" -Recurse
foreach ($file in $javaFiles) {
    $content = Get-Content $file.FullName -Raw
    
    if (($content -match "@RequestMapping") -or ($content -match "@PostMapping") -or ($content -match "@GetMapping")) {
        if (($content -notmatch "@PreAuthorize") -and ($content -notmatch "@Secured") -and ($content -notmatch "@RolesAllowed")) {
            Add-Vulnerability "Access Control" "Missing Authorization" "HIGH" $file.FullName `
                "Endpoint lacks proper authorization checks" "7.5" `
                "Add authorization annotations to secure endpoints"
        }
    }
}

# A02: Cryptographic Failures
Write-Host "`nüîê Checking for Cryptographic Failures..." -ForegroundColor Yellow

foreach ($file in $javaFiles) {
    $content = Get-Content $file.FullName -Raw
    
    if (($content -match "DES") -or ($content -match "RC4") -or ($content -match "MD5") -or ($content -match "SHA1")) {
        Add-Vulnerability "Cryptography" "Weak Encryption" "HIGH" $file.FullName `
            "Use of weak cryptographic algorithms" "6.5" `
            "Use AES-256, SHA-256, or stronger algorithms"
    }
    
    if ($content -match 'key.*=.*"[A-Za-z0-9+/]{16,}"') {
        Add-Vulnerability "Cryptography" "Hardcoded Key" "CRITICAL" $file.FullName `
            "Encryption key hardcoded in source" "9.8" `
            "Store keys in secure key management system"
    }
}

# A03: Injection Vulnerabilities
Write-Host "`nüíâ Checking for Injection Vulnerabilities..." -ForegroundColor Yellow

foreach ($file in $javaFiles) {
    $lines = Get-Content $file.FullName
    
    for ($i = 0; $i -lt $lines.Count; $i++) {
        $line = $lines[$i]
        
        if ($line -match "String.*sql.*=.*\+.*" -and (($line -match "SELECT") -or ($line -match "INSERT") -or ($line -match "UPDATE") -or ($line -match "DELETE"))) {
            Add-Vulnerability "Injection" "SQL Injection" "CRITICAL" $file.FullName `
                "SQL injection at line $($i+1)" "9.3" `
                "Use PreparedStatement with parameters"
        }
        
        if (($line -match "Runtime\.getRuntime") -or ($line -match "ProcessBuilder")) {
            if (($line -match "\+.*input") -or ($line -match "param")) {
                Add-Vulnerability "Injection" "Command Injection" "HIGH" $file.FullName `
                    "Command injection at line $($i+1)" "8.1" `
                    "Validate inputs before command execution"
            }
        }
    }
}

# A04: Insecure Design
Write-Host "`nüèóÔ∏è Checking for Insecure Design..." -ForegroundColor Yellow

$configFiles = Get-ChildItem "$PROJECT_ROOT\backend\src\main\resources" -Filter "*.xml" -Recurse
foreach ($config in $configFiles) {
    $content = Get-Content $config.FullName -Raw
    
    if (($content -match "login") -or ($content -match "authentication")) {
        if (($content -notmatch "rate.*limit") -and ($content -notmatch "throttle")) {
            Add-Vulnerability "Design" "Missing Rate Limiting" "MEDIUM" $config.FullName `
                "Authentication lacks rate limiting" "5.3" `
                "Implement rate limiting for auth endpoints"
        }
    }
}

# A05: Security Misconfiguration
Write-Host "`n‚öôÔ∏è Checking for Security Misconfiguration..." -ForegroundColor Yellow

$hibernateFiles = Get-ChildItem "$PROJECT_ROOT\backend\src\main\resources" -Filter "hibernate*.xml"
foreach ($hibernate in $hibernateFiles) {
    $content = Get-Content $hibernate.FullName -Raw
    
    if ($hibernate.Name -like "*production*" -and $content -match "show_sql.*true") {
        Add-Vulnerability "Configuration" "SQL Logging in Production" "MEDIUM" $hibernate.FullName `
            "SQL queries logged in production" "4.3" `
            "Disable SQL logging in production"
    }
}

# A06: Vulnerable Components
Write-Host "`nüì¶ Checking for Vulnerable Components..." -ForegroundColor Yellow

$pomFile = "$PROJECT_ROOT\backend\pom.xml"
if (Test-Path $pomFile) {
    $pomContent = Get-Content $pomFile -Raw
    
    if ($pomContent -match "log4j.*version.*2\.1[0-4]") {
        Add-Vulnerability "Dependencies" "Vulnerable Log4j" "CRITICAL" $pomFile `
            "Using vulnerable Log4j version" "10.0" `
            "Update Log4j to version 2.15.0 or later"
    }
}

# A07: Authentication Failures
Write-Host "`nüîë Checking for Authentication Failures..." -ForegroundColor Yellow

foreach ($file in $javaFiles) {
    $content = Get-Content $file.FullName -Raw
    
    if ($content -match "password.*length.*[1-7]") {
        Add-Vulnerability "Authentication" "Weak Password Policy" "MEDIUM" $file.FullName `
            "Password policy allows weak passwords" "5.5" `
            "Enforce strong password requirements"
    }
    
    if ($content -match "login.*attempt") {
        if (($content -notmatch "lockout") -and ($content -notmatch "suspend")) {
            Add-Vulnerability "Authentication" "Missing Account Lockout" "MEDIUM" $file.FullName `
                "No account lockout mechanism" "5.0" `
                "Implement account lockout after failed attempts"
        }
    }
}

# A08: Software Integrity Failures
Write-Host "`nüîê Checking for Software Integrity Failures..." -ForegroundColor Yellow

foreach ($file in $javaFiles) {
    $content = Get-Content $file.FullName -Raw
    
    if (($content -match "ObjectInputStream") -or ($content -match "readObject")) {
        if ($content -notmatch "validateObject") {
            Add-Vulnerability "Integrity" "Insecure Deserialization" "HIGH" $file.FullName `
                "Unsafe deserialization without validation" "8.1" `
                "Implement deserialization validation"
        }
    }
}

# A09: Security Logging Failures
Write-Host "`nüìù Checking for Security Logging Failures..." -ForegroundColor Yellow

$logbackFile = "$PROJECT_ROOT\backend\src\main\resources\logback.xml"
if (Test-Path $logbackFile) {
    $logContent = Get-Content $logbackFile -Raw
    
    if (($logContent -notmatch "authentication") -and ($logContent -notmatch "authorization")) {
        Add-Vulnerability "Logging" "Missing Security Logging" "MEDIUM" $logbackFile `
            "Security events not logged" "4.3" `
            "Implement security event logging"
    }
}

# A10: SSRF
Write-Host "`nüåê Checking for SSRF Vulnerabilities..." -ForegroundColor Yellow

foreach ($file in $javaFiles) {
    $content = Get-Content $file.FullName -Raw
    
    if ($content -match "URL.*=.*new.*URL" -and $content -match "@RequestParam") {
        Add-Vulnerability "SSRF" "Server-Side Request Forgery" "HIGH" $file.FullName `
            "HTTP requests with user-controlled URLs" "7.5" `
            "Validate and whitelist allowed URLs"
    }
}

# Database Security
Write-Host "`nüóÑÔ∏è Checking Database Security..." -ForegroundColor Yellow

$dbPath = "$PROJECT_ROOT\backend\food_ordering.db"
if (Test-Path $dbPath) {
    $header = [System.IO.File]::ReadAllBytes($dbPath)[0..15]
    $headerText = [System.Text.Encoding]::ASCII.GetString($header)
    
    if ($headerText.StartsWith("SQLite format")) {
        Add-Vulnerability "Database" "Unencrypted Database" "HIGH" $dbPath `
            "Database stored in plain text" "6.5" `
            "Implement database encryption"
    }
}

# Show Summary
Write-Host "`n" + "="*60 -ForegroundColor Cyan
Write-Host "üîç VULNERABILITY SCAN SUMMARY" -ForegroundColor Cyan
Write-Host "="*60 -ForegroundColor Cyan

Write-Host "Total Vulnerabilities: $($Vulnerabilities.Count)" -ForegroundColor White
Write-Host "Critical: $CriticalVulns" -ForegroundColor Red
Write-Host "High: $HighVulns" -ForegroundColor Red
Write-Host "Medium: $MediumVulns" -ForegroundColor Yellow
Write-Host "Low: $LowVulns" -ForegroundColor Gray

$overallRisk = if ($CriticalVulns -gt 0) { "CRITICAL" }
               elseif ($HighVulns -gt 3) { "HIGH" }
               elseif ($HighVulns -gt 0) { "MEDIUM" }
               else { "LOW" }

Write-Host "`nOverall Risk Level: $overallRisk" -ForegroundColor $(
    switch ($overallRisk) {
        "CRITICAL" { "Red" }
        "HIGH" { "Red" }
        "MEDIUM" { "Yellow" }
        "LOW" { "Green" }
    }
)

Write-Host "="*60 -ForegroundColor Cyan

# Generate Report
if (-not (Test-Path "$PROJECT_ROOT\logs")) {
    New-Item -Path "$PROJECT_ROOT\logs" -ItemType Directory -Force | Out-Null
}

$reportFile = "$PROJECT_ROOT\logs\vulnerability-scan-$TIMESTAMP.md"

$report = "# Vulnerability Scan Report`n"
$report += "**Date**: $(Get-Date)`n"
$report += "**Total Vulnerabilities**: $($Vulnerabilities.Count)`n"
$report += "**Risk Level**: $overallRisk`n`n"

$report += "## Summary`n"
$report += "- Critical: $CriticalVulns`n"
$report += "- High: $HighVulns`n"
$report += "- Medium: $MediumVulns`n"
$report += "- Low: $LowVulns`n`n"

$report += "## Vulnerabilities`n"
$report += "| Severity | Category | Title | CVSS | File | Remediation |`n"
$report += "|----------|----------|-------|------|------|-------------|`n"

foreach ($vuln in $Vulnerabilities) {
    $report += "| $($vuln.Severity) | $($vuln.Category) | $($vuln.Title) | $($vuln.CVSS) | $($vuln.File) | $($vuln.Remediation) |`n"
}

$report += "`n## Priority Actions`n"

$critical = $Vulnerabilities | Where-Object { $_.Severity -eq "CRITICAL" }
if ($critical.Count -gt 0) {
    $report += "### Critical (Immediate Action Required)`n"
    foreach ($vuln in $critical) {
        $report += "- **$($vuln.Title)**: $($vuln.Remediation)`n"
    }
}

$high = $Vulnerabilities | Where-Object { $_.Severity -eq "HIGH" }
if ($high.Count -gt 0) {
    $report += "### High Priority`n"
    foreach ($vuln in $high) {
        $report += "- $($vuln.Title): $($vuln.Remediation)`n"
    }
}

$report += "`n---`n"
$report += "**Next Scan**: $(Get-Date -Date (Get-Date).AddDays(7) -Format 'yyyy-MM-dd')`n"

$report | Out-File $reportFile -Encoding UTF8
Write-Host "`nüìÑ Report saved: $reportFile" -ForegroundColor Green

if ($CriticalVulns -gt 0) { exit 4 }
elseif ($HighVulns -gt 0) { exit 3 }
elseif ($MediumVulns -gt 0) { exit 2 }
else { exit 0 }
